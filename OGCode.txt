using System;
using System.Diagnostics;
using System.Windows.Forms;
using MySql.Data.MySqlClient;
using Mysqlx.Crud;
using System.Windows.Forms;
using static System.ComponentModel.Design.ObjectSelectorEditor;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;
using Org.BouncyCastle.Bcpg;
using System.Globalization;
using System.Linq.Expressions;
using Org.BouncyCastle.Utilities;
using System.ComponentModel.Design;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.Rebar;
using Org.BouncyCastle.Utilities.Collections;
using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;
using QuestPDF.Previewer;
using Google.Protobuf.WellKnownTypes;
using System.Drawing;
using MySqlX.XDevAPI.Relational;
using System.Data.Common;
using Mysqlx.Resultset;
using System.Reflection;


namespace PPcN
{
    public partial class Form1 : Form
    {
        private bool firstCon = false;

        string connectionString = "Server=127.0.0.1;Port=3306;Database=prostahl;Uid=root;Pwd=1234;";

        string ArticleNumber;

        bool boollistOrderPositionArticleProgSelection = false;
        bool boollistOrderPositionSelection = false;



        public Form1()
        {
            InitializeComponent();

            StartupTasks();
        }

        //Following is all for the Customer Tab
        //Functions are to Create and modify new Customers and Delivery Addresses
        //To DO: 
        //Show Orders and information for the selected customers. 
        //Reload Lists after Creating/Modifying Table so it will directly show up
        //Standard Zahlungsbedingungen in Kundendaten hinterlegen und dann automatisch einladen bei Selektion. 

        private void StartupTasks()
        {
            if (firstCon == false)
            {
                firstCon = true;

                QuestPDF.Settings.License = LicenseType.Community;

                //Add information here to load listStorageCoilsMaterialCreationMaterials on startup
                SwitchCaseTabControl();
            }
        }

        //GetFieldValue will do a Database lookup and return the correct value. 
        private string GetFieldValue(string returnColumn, string Keyphrase, string table, string searchcolumn)
        {
            string query = $"SELECT `{returnColumn}` FROM `prostahl`.`{table}` WHERE `{searchcolumn}` LIKE '{Keyphrase}' ORDER BY `{searchcolumn}` ASC LIMIT 1";

            try
            {
                using (MySqlConnection connection = new MySqlConnection(connectionString))
                {
                    connection.Open();
                    MySqlCommand command = new MySqlCommand(query, connection);
                    object result = command.ExecuteScalar();

                    return result?.ToString() ?? "";
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return "";
            }
        }



        private void MainTabControl_SelectedIndexChanged(object sender, EventArgs e)
        {
            SwitchCaseTabControl();
        }

        private void SwitchCaseTabControl()
        {
            // Get the currently selected TabPage
            TabPage selectedTab = tabControl.SelectedTab;

            // Switch based on the selected TabPage
            switch (selectedTab)
            {
                case TabPage tp when tp == tabPage1:
                    // Kunden
                    break;

                case TabPage tp when tp == tabPage2:
                    // Aufträge
                    SwitchCaseOrderControl();


                    break;

                case TabPage tp when tp == tabPage3:
                    // Lager Rohre

                    break;

                case TabPage tp when tp == tabPage4:
                    // Lager Coils
                    PopulateComboLists();
                    break;

                case TabPage tp when tp == tabPage5:
                    // Produktion
                    SwitchCaseProductionControl();
                    break;

                case TabPage tp when tp == Admin:
                    // ADmin

                    break;

                case TabPage tp when tp == tabPage16:
                    // Planung

                    break;
            }
        }

        private void SwitchCaseOrderControl()
        {
            // Get the currently selected TabPage
            TabPage selectedTab = tabControl2.SelectedTab;

            // Switch based on the selected TabPage
            switch (selectedTab)
            {
                case TabPage tp when tp == tabPage24:
                    // Angebote

                    break;

                case TabPage tp when tp == tabPage14:
                    // Aufträge

                    PopulateOrderCreationArticleSelectionList();
                    OrderCreationPositionMaterialsRefresh();


                    break;
            }
        }

        private void SwitchCaseProductionControl()
        {
            // Get the currently selected TabPage
            TabPage selectedTab = tabControl1.SelectedTab;

            // Switch based on the selected TabPage
            switch (selectedTab)
            {
                case TabPage tp when tp == tabPage6:
                    // Spaltpläne
                    listProductionSlittingPlanScheduleRefresh();
                    break;
            }
        }

        double CalculatePricePerKG(double OD, double WT, double priceperM)
        {
            //This always assumes Density 7,97! 
            double result = priceperM / (WT * (OD - WT) * Math.PI * 7.97 / 1000);
            return result;
        }



        //Following is all to create new Orders:

        private void txtOrderOrderCreationCustomerSearch_TextChanged(object sender, EventArgs e)
        {
            if (txtOrderOrderCreationCustomerSearch.Text != null)
            {
                listOrderOrderCreationCustomers.Items.Clear();

                try
                {
                    using (MySqlConnection connection = new MySqlConnection(connectionString))
                    {
                        connection.Open();

                        string query = $"SELECT * FROM `prostahl`.`kunden` WHERE CONCAT_WS(' ', `Kürzel`, `Firmenname`, `Rechnung_Straße`, `Rechnung_Hausnummer`, `Rechnung_Stadt`, `Rechnung_PLZ`, `Rechnung_Land`, `Einkäufer_Name`, `Einkäufer_Telefonnummer`, `Einkäufer_EMail`, `Buchhaltung_Name`, `Buchhaltung_Telefonnummer`, `Buchhaltung_EMail`, `Werkszeugnis_EMail`, `Rechnung_EMail`) LIKE '%{txtOrderOrderCreationCustomerSearch.Text}%' ORDER BY `Firmenname` ASC LIMIT 1000;\r\n";
                        MySqlCommand command = new MySqlCommand(query, connection);

                        using (MySqlDataReader reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                // Read values from columns
                                string firmenname = reader.GetString(2); // Assuming `Firmenname` is at index 2

                                // Do something with the values...
                                listOrderOrderCreationCustomers.Items.Add(firmenname);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Error: " + ex.Message);
                }
            }
        }

        private void txtOrderOrderCreationDeliveryAdressSearch_TextChanged(object sender, EventArgs e)
        {
            if (txtOrderOrderCreationDeliveryAdressSearch.Text != null)
            {
                listOrderOrderCreationDeliveryAdress.Items.Clear();

                try
                {
                    using (MySqlConnection connection = new MySqlConnection(connectionString))
                    {
                        connection.Open();

                        string query = $"SELECT * FROM `prostahl`.`lieferanschrift` WHERE CONCAT_WS(' ', `Firmenname`, `Straße`, `Hausnummer`, `PLZ`, `Stadt`, `Land`, `Ansprechpartner`, `Ansprechpartner_Telefon`, `Ansprechpartner_Mail`) LIKE '%{txtOrderOrderCreationDeliveryAdressSearch.Text}%' ORDER BY `Firmenname` ASC LIMIT 1000;\r\n";
                        MySqlCommand command = new MySqlCommand(query, connection);

                        using (MySqlDataReader reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                // Read values from columns
                                string readout = reader.GetString(1); // Assuming the searched value is at index 1

                                // Do something with the values...
                                listOrderOrderCreationDeliveryAdress.Items.Add(readout);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Error: " + ex.Message);
                }
            }
        }

        private void btnCreateOrder_Click(object sender, EventArgs e)
        {
            if (listOrderOrderCreationDeliveryAdress.SelectedItem != null && listOrderOrderCreationCustomers.SelectedItem != null)
            {
                string Vorkasse;
                int VorkasseWert;
                if (chkVorkasse.Checked) { Vorkasse = "Ja"; VorkasseWert = 1; } else { Vorkasse = "Nein"; VorkasseWert = 0; }

                DialogResult result = MessageBox.Show(
                $"Lieferanschrift Nummer: {GetFieldValue("Lieferanschrift_Nummer", listOrderOrderCreationCustomers.SelectedItem.ToString(), "lieferanschrift", "Firmenname")}{Environment.NewLine}" +
                $"Kunde: {GetFieldValue("Firmenname", listOrderOrderCreationCustomers.SelectedItem.ToString(), "kunden", "Firmenname")} {Environment.NewLine}" +
                $"Lieferanschrift: {GetFieldValue("Firmenname", listOrderOrderCreationDeliveryAdress.SelectedItem.ToString(), "lieferanschrift", "Firmenname")}{Environment.NewLine}" +
                $"Bestellangaben des Kunden: {txtOrderInformation.Text}{Environment.NewLine}" +
                $"Skonto %: {txtOrderCreationSkonto.Text}{Environment.NewLine}" +
                $"Innerhalb Tagen nach Rechnung: {txtOrderCreationSkontofrist.Text}{Environment.NewLine}" +
                $"Fälligkeit Netto: {txtOrderCreationNettofrist.Text}{Environment.NewLine}" +
                $"Vorkasse?: {Vorkasse}{Environment.NewLine}",
                "Confirm Details", // Title of the message box
                MessageBoxButtons.YesNo); // Buttons for the message box



                // Check the Length of the MessageBox
                if (result == DialogResult.Yes)
                {

                    // SQL query
                    string query = @"INSERT INTO aufträge 
                (Kundennummer, Lieferanschriftnummer, `BestellangabendesKunden`, `Skonto`, `SkontoFrist`, `Nettofrist`, `Vorkasse`) 
                VALUES 
                (@Kundennummer, @Lieferanschriftnummer, @BestellangabendesKunden, @Skonto, @SkontoFrist, @Nettofrist, @Vorkasse)";

                    // Create MySqlConnection object
                    using (MySqlConnection connection = new MySqlConnection(connectionString))
                    {
                        // Open the connection
                        connection.Open();

                        // Create MySqlCommand object
                        using (MySqlCommand command = new MySqlCommand(query, connection))
                        {
                            // Add parameters
                            command.Parameters.AddWithValue("@Kundennummer", GetFieldValue("Kundennummer", listOrderOrderCreationCustomers.SelectedItem.ToString(), "kunden", "Firmenname"));
                            command.Parameters.AddWithValue("@Lieferanschriftnummer", GetFieldValue("Lieferanschrift_Nummer", listOrderOrderCreationDeliveryAdress.SelectedItem.ToString(), "lieferanschrift", "Firmenname"));
                            command.Parameters.AddWithValue("@BestellangabendesKunden", txtOrderInformation.Text);
                            command.Parameters.AddWithValue("@Skonto", txtOrderCreationSkonto.Text.Replace(',', '.'));
                            command.Parameters.AddWithValue("@SkontoFrist", txtOrderCreationSkontofrist.Text);
                            command.Parameters.AddWithValue("@Nettofrist", txtOrderCreationNettofrist.Text);
                            command.Parameters.AddWithValue("@Vorkasse", VorkasseWert);

                            // Execute the query
                            command.ExecuteNonQuery();
                        }
                    }

                    using (MySqlConnection conn = new MySqlConnection(connectionString))
                    {
                        conn.Open();

                        query = "SELECT Auftragsnummer FROM aufträge ORDER BY Auftragsnummer DESC LIMIT 1";

                        using (MySqlCommand cmd = new MySqlCommand(query, conn))
                        {
                            object orderno = cmd.ExecuteScalar();

                            // Check for null in case the table is empty
                            if (orderno != DBNull.Value)
                            {
                                txtOrderOrderNumberSearch.Text = (Convert.ToInt32(orderno)).ToString();
                            }
                        }
                    }
                }
            }
        }

        private void txtOrderOrderNumberSearch_TextChanged(object sender, EventArgs e)
        {

            string query = $"SELECT* FROM `prostahl`.`aufträgepositionen` WHERE Auftragsnummer = {txtOrderOrderNumberSearch.Text} ORDER BY `Auftragsnummer` ASC LIMIT 1000;";


            //This Code block is for the Listbox for Material Selection
            listOrderCreationPositions.Items.Clear();

            try
            {
                using (MySqlConnection connection = new MySqlConnection(connectionString))
                {
                    connection.Open();

                    Debug.WriteLine(query);
                    MySqlCommand command = new MySqlCommand(query, connection);


                    using (MySqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            // Read values from columns
                            string readout = reader.GetInt16(2).ToString(); // Assuming the searched value is at index 1

                            // Do something with the values...
                            listOrderCreationPositions.Items.Add(readout);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }





            if (!String.IsNullOrEmpty(GetFieldValue("Firmenname", GetFieldValue("Lieferanschriftnummer", txtOrderOrderNumberSearch.Text, "aufträge", "Auftragsnummer"), "lieferanschrift", "Lieferanschrift_Nummer")))
            {
                string Auftragsnummer = txtOrderOrderNumberSearch.Text;

                txtOrderInformation.Text = GetFieldValue("BestellangabendesKunden", Auftragsnummer, "aufträge", "Auftragsnummer");
                txtOrderCreationSkonto.Text = GetFieldValue("Skonto", Auftragsnummer, "aufträge", "Auftragsnummer");
                txtOrderCreationSkontofrist.Text = GetFieldValue("SkontoFrist", Auftragsnummer, "aufträge", "Auftragsnummer");
                txtOrderCreationNettofrist.Text = GetFieldValue("Nettofrist", Auftragsnummer, "aufträge", "Auftragsnummer");

                //This will do the Customer Order Information: 
                string Kundennummer = GetFieldValue("Kundennummer", Auftragsnummer, "aufträge", "Auftragsnummer");
                txtOrderOrderCreationCustomerContact.Text = GetFieldValue("Einkäufer_Name", Kundennummer, "kunden", "Kundennummer");
                txtOrderOrderCreationCustomerStreet.Text = GetFieldValue("Rechnung_Straße", Kundennummer, "kunden", "Kundennummer");
                txtOrderOrderCreationCustomerHouseNr.Text = GetFieldValue("Rechnung_Hausnummer", Kundennummer, "kunden", "Kundennummer");
                txtOrderOrderCreationCustomerPostcode.Text = GetFieldValue("Rechnung_PLZ", Kundennummer, "kunden", "Kundennummer");
                txtOrderOrderCreationCustomerCity.Text = GetFieldValue("Rechnung_Stadt", Kundennummer, "kunden", "Kundennummer");
                listOrderOrderCreationCustomers.Items.Clear();
                listOrderOrderCreationCustomers.Items.Add(GetFieldValue("Firmenname", Kundennummer, "kunden", "Kundennummer"));

                //This will do Delivery Adress Information:
                string Lieferanschriftnummer = GetFieldValue("Lieferanschriftnummer", Auftragsnummer, "aufträge", "Auftragsnummer");
                txtOrderOrderCreationDeliveryAdressStreet.Text = GetFieldValue("Straße", Lieferanschriftnummer, "lieferanschrift", "Lieferanschrift_Nummer");
                txtOrderOrderCreationDeliveryAdressHouseNr.Text = GetFieldValue("Hausnummer", Lieferanschriftnummer, "lieferanschrift", "Lieferanschrift_Nummer");
                txtOrderOrderCreationDeliveryAdressPostCode.Text = GetFieldValue("PLZ", Lieferanschriftnummer, "lieferanschrift", "Lieferanschrift_Nummer");
                txtOrderOrderCreationDeliveryAdressCity.Text = GetFieldValue("Stadt", Lieferanschriftnummer, "lieferanschrift", "Lieferanschrift_Nummer");
                txtOrderOrderCreationDeliveryAdressContact.Text = GetFieldValue("Ansprechpartner", Lieferanschriftnummer, "lieferanschrift", "Lieferanschrift_Nummer");
                listOrderOrderCreationDeliveryAdress.Items.Clear();
                listOrderOrderCreationDeliveryAdress.Items.Add(GetFieldValue("Firmenname", Lieferanschriftnummer, "lieferanschrift", "Lieferanschrift_Nummer"));

                //This will Populate the Surcharge List:
                // Clear the existing items and columns
                listSurcharge.Items.Clear();
                listSurcharge.Columns.Clear();

                // Add columns to the ListView
                listSurcharge.Columns.Add("Zuschlagsart", 100);
                listSurcharge.Columns.Add("Beschreibung", 100);
                listSurcharge.Columns.Add("Menge", 100);

                // Fetch rows from the database
                List<string[]> rows = GetRows(txtOrderOrderNumberSearch.Text);

                // Add each row to the ListView
                foreach (var row in rows)
                {
                    listSurcharge.Items.Add(new ListViewItem(row));
                }
            }
            else
            {
                txtOrderInformation.Text = "";
                txtOrderCreationSkonto.Text = "";
                txtOrderCreationSkontofrist.Text = "";
                txtOrderCreationNettofrist.Text = "";
                txtOrderOrderCreationCustomerContact.Text = "";
                txtOrderOrderCreationCustomerStreet.Text = "";
                txtOrderOrderCreationCustomerHouseNr.Text = "";
                txtOrderOrderCreationCustomerPostcode.Text = "";
                txtOrderOrderCreationCustomerCity.Text = "";
                listOrderOrderCreationCustomers.Items.Clear();
                txtOrderOrderCreationDeliveryAdressStreet.Text = "";
                txtOrderOrderCreationDeliveryAdressHouseNr.Text = "";
                txtOrderOrderCreationDeliveryAdressPostCode.Text = "";
                txtOrderOrderCreationDeliveryAdressCity.Text = "";
                txtOrderOrderCreationDeliveryAdressContact.Text = "";
                listOrderOrderCreationDeliveryAdress.Items.Clear();
            }
        }

        private void listOrderOrderCreationCustomers_SelectedIndexChanged(object sender, EventArgs e)
        {
            string firmenname = listOrderOrderCreationCustomers.SelectedItem.ToString();
            txtOrderOrderCreationCustomerContact.Text = GetFieldValue("Einkäufer_Name", firmenname, "kunden", "Firmenname");
            txtOrderOrderCreationCustomerStreet.Text = GetFieldValue("Rechnung_Straße", firmenname, "kunden", "Firmenname");
            txtOrderOrderCreationCustomerHouseNr.Text = GetFieldValue("Rechnung_Hausnummer", firmenname, "kunden", "Firmenname");
            txtOrderOrderCreationCustomerPostcode.Text = GetFieldValue("Rechnung_PLZ", firmenname, "kunden", "Firmenname");
            txtOrderOrderCreationCustomerCity.Text = GetFieldValue("Rechnung_Stadt", firmenname, "kunden", "Firmenname");
            txtOrderCreationSkonto.Text = GetFieldValue("Skonto", firmenname, "kunden", "Firmenname");
            txtOrderCreationSkontofrist.Text = GetFieldValue("Skontofrist", firmenname, "kunden", "Firmenname");
            txtOrderCreationNettofrist.Text = GetFieldValue("Nettofrist", firmenname, "kunden", "Firmenname");

        }

        private void listOrderOrderCreationDeliveryAdress_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (listOrderOrderCreationDeliveryAdress.SelectedItem != null)
            {

                string ID = listOrderOrderCreationDeliveryAdress.SelectedItem.ToString();
                txtOrderOrderCreationDeliveryAdressStreet.Text = GetFieldValue("Straße", ID, "lieferanschrift", "Firmenname");
                txtOrderOrderCreationDeliveryAdressHouseNr.Text = GetFieldValue("Hausnummer", ID, "lieferanschrift", "Firmenname");
                txtOrderOrderCreationDeliveryAdressPostCode.Text = GetFieldValue("PLZ", ID, "lieferanschrift", "Firmenname");
                txtOrderOrderCreationDeliveryAdressCity.Text = GetFieldValue("Stadt", ID, "lieferanschrift", "Firmenname");
                txtOrderOrderCreationDeliveryAdressContact.Text = GetFieldValue("Ansprechpartner", ID, "lieferanschrift", "Firmenname");
            }
        }


        private void btnOrderCreationCreateOC_Click(object sender, EventArgs e)
        {

            int PositionenAnzahl = 0;
            int ZuschlägeAnzahl = 0;

            string Auftragsnummer = txtOrderOrderNumberSearch.Text;


            using (MySqlConnection conn = new MySqlConnection(connectionString))
            {
                conn.Open();
                string countQuery = $"SELECT COUNT(*) FROM aufträgepositionen WHERE Auftragsnummer = {Auftragsnummer}";

                using (MySqlCommand cmd = new MySqlCommand(countQuery, conn))
                {
                    PositionenAnzahl = Convert.ToInt32(cmd.ExecuteScalar());
                }
            }

            using (MySqlConnection conn = new MySqlConnection(connectionString))
            {
                conn.Open();
                string countQuery = $"SELECT COUNT(*) FROM aufträgezuschläge WHERE Auftragsnummer = {Auftragsnummer}";

                using (MySqlCommand cmd = new MySqlCommand(countQuery, conn))
                {
                    ZuschlägeAnzahl = Convert.ToInt32(cmd.ExecuteScalar());
                }
            }


            PDFOCSurcharge[] OCSurcharges = new PDFOCSurcharge[ZuschlägeAnzahl];

            PDFOCPositionData[] OCPositions = new PDFOCPositionData[PositionenAnzahl];


            using (MySqlConnection conn = new MySqlConnection(connectionString))
            {
                int PosCounter = 0;

                string countQuery = $"SELECT LaufendePositionsnummer FROM aufträgepositionen WHERE Auftragsnummer = {Auftragsnummer}";

                Debug.WriteLine(countQuery);

                try
                {
                    using (MySqlConnection connection = new MySqlConnection(connectionString))
                    {
                        connection.Open();

                        using (MySqlCommand command = new MySqlCommand(countQuery, connection))
                        {

                            using (MySqlDataReader reader = command.ExecuteReader())
                            {
                                while (reader.Read())
                                {

                                    string ReaderPos = reader.GetValue(0).ToString();

                                    int Pos = int.Parse(ReaderPos);

                                    string Mengeneinheit = "";
                                    string SchleifenText = "";


                                    switch (int.Parse(GetFieldValue("BestellmengeEinheit", ReaderPos, "aufträgepositionen", "LaufendePositionsnummer")))
                                    {
                                        case 0:
                                            Mengeneinheit = "Stk.";
                                            break;
                                        case 1:
                                            Mengeneinheit = "m";
                                            break;
                                        case 2:
                                            Mengeneinheit = "To";
                                            break;
                                    }

                                    string Mengentoleranzeinheit = "";

                                    switch (int.Parse(GetFieldValue("MengentoleranzEinheit", ReaderPos, "aufträgepositionen", "LaufendePositionsnummer")))
                                    {
                                        case 0:
                                            Mengentoleranzeinheit = "%";
                                            break;
                                        case 1:
                                            Mengentoleranzeinheit = "Stk.";
                                            break;
                                        case 2:
                                            Mengentoleranzeinheit = "m";
                                            break;
                                    }

                                    string Preiseinheit = "";

                                    switch (int.Parse(GetFieldValue("PreisEinheit", ReaderPos, "aufträgepositionen", "LaufendePositionsnummer")))
                                    {
                                        case 0:
                                            Preiseinheit = "Stk.";
                                            break;
                                        case 1:
                                            Preiseinheit = "m";
                                            break;
                                        case 2:
                                            Preiseinheit = "To";
                                            break;
                                    }

                                    string WAZ = "";

                                    switch (int.Parse(GetFieldValue("WAZ", ReaderPos, "aufträgepositionen", "LaufendePositionsnummer")))
                                    {
                                        case 0:
                                            WAZ = "APZ 3.1 / EN10204";
                                            break;
                                        case 1:
                                            WAZ = "APZ 3.1 / EN10204 + AD2000 - W2";
                                            break;
                                        case 2:
                                            WAZ = "APZ 3.1 / EN10204 + AD2000 - W2 / -W10";
                                            break;
                                        case 3:
                                            WAZ = "APZ 3.2 / EN10204";
                                            break;
                                    }

                                    string NormText = "";
                                    string AusfuhrungsEinheit = "";


                                    switch (int.Parse(GetFieldValue("Norm", ReaderPos, "aufträgepositionen", "LaufendePositionsnummer")))
                                    {
                                        case 0:
                                            NormText = "EN 10217 - 7 TC1";

                                            switch (int.Parse(GetFieldValue("Ausfuhrung", ReaderPos, "aufträgepositionen", "LaufendePositionsnummer")))
                                            {
                                                case 0:
                                                    AusfuhrungsEinheit = "W0";
                                                    break;
                                                case 1:
                                                    AusfuhrungsEinheit = "W1R";
                                                    break;
                                                case 2:
                                                    AusfuhrungsEinheit = "W2R";
                                                    break;
                                                case 3:
                                                    AusfuhrungsEinheit = "W0b";
                                                    break;
                                                case 4:
                                                    AusfuhrungsEinheit = "W1Rb";
                                                    break;
                                                case 5:
                                                    AusfuhrungsEinheit = "W2Rb";
                                                    break;
                                                case 6:
                                                    AusfuhrungsEinheit = "W1R/W2R";
                                                    break;
                                                case 7:
                                                    AusfuhrungsEinheit = "W1";
                                                    break;
                                                case 8:
                                                    AusfuhrungsEinheit = "W1b";
                                                    break;
                                                case 9:
                                                    AusfuhrungsEinheit = "W1A";
                                                    break;
                                                case 10:
                                                    AusfuhrungsEinheit = "WW1Ab";
                                                    break;
                                                case 11:
                                                    AusfuhrungsEinheit = "W2";
                                                    break;
                                                case 12:
                                                    AusfuhrungsEinheit = "W2b";
                                                    break;
                                                case 13:
                                                    AusfuhrungsEinheit = "W2A";
                                                    break;
                                                case 14:
                                                    AusfuhrungsEinheit = "W2Ab";
                                                    break;
                                                case 15:
                                                    AusfuhrungsEinheit = "WCA";
                                                    break;
                                                case 16:
                                                    AusfuhrungsEinheit = "WG";
                                                    break;
                                                case 17:
                                                    AusfuhrungsEinheit = "WP";
                                                    break;
                                            }

                                            break;
                                        case 1:
                                            NormText = "EN 10217 - 7 TC2";
                                            switch (int.Parse(GetFieldValue("Ausfuhrung", ReaderPos, "aufträgepositionen", "LaufendePositionsnummer")))
                                            {
                                                case 0:
                                                    AusfuhrungsEinheit = "W0";
                                                    break;
                                                case 1:
                                                    AusfuhrungsEinheit = "W1R";
                                                    break;
                                                case 2:
                                                    AusfuhrungsEinheit = "W2R";
                                                    break;
                                                case 3:
                                                    AusfuhrungsEinheit = "W0b";
                                                    break;
                                                case 4:
                                                    AusfuhrungsEinheit = "W1Rb";
                                                    break;
                                                case 5:
                                                    AusfuhrungsEinheit = "W2Rb";
                                                    break;
                                                case 6:
                                                    AusfuhrungsEinheit = "W1R/W2R";
                                                    break;
                                                case 7:
                                                    AusfuhrungsEinheit = "W1";
                                                    break;
                                                case 8:
                                                    AusfuhrungsEinheit = "W1b";
                                                    break;
                                                case 9:
                                                    AusfuhrungsEinheit = "W1A";
                                                    break;
                                                case 10:
                                                    AusfuhrungsEinheit = "WW1Ab";
                                                    break;
                                                case 11:
                                                    AusfuhrungsEinheit = "W2";
                                                    break;
                                                case 12:
                                                    AusfuhrungsEinheit = "W2b";
                                                    break;
                                                case 13:
                                                    AusfuhrungsEinheit = "W2A";
                                                    break;
                                                case 14:
                                                    AusfuhrungsEinheit = "W2Ab";
                                                    break;
                                                case 15:
                                                    AusfuhrungsEinheit = "WCA";
                                                    break;
                                                case 16:
                                                    AusfuhrungsEinheit = "WG";
                                                    break;
                                                case 17:
                                                    AusfuhrungsEinheit = "WP";
                                                    break;
                                            }
                                            break;
                                        case 2:
                                            NormText = "EN 10296 - 2";
                                            switch (int.Parse(GetFieldValue("Ausfuhrung", ReaderPos, "aufträgepositionen", "LaufendePositionsnummer")))
                                            {
                                                case 0:
                                                    AusfuhrungsEinheit = "+AR";
                                                    break;
                                                case 1:
                                                    AusfuhrungsEinheit = "+AT";
                                                    break;
                                                case 2:
                                                    AusfuhrungsEinheit = "+AR + Glätten";
                                                    break;
                                                case 3:
                                                    AusfuhrungsEinheit = "+AT + Glätten";
                                                    break;
                                            }
                                            break;
                                        case 3:
                                            NormText = "SEW 470";
                                            switch (int.Parse(GetFieldValue("Ausfuhrung", ReaderPos, "aufträgepositionen", "LaufendePositionsnummer")))
                                            {
                                                case 0:
                                                    AusfuhrungsEinheit = "";
                                                    break;
                                                case 1:
                                                    AusfuhrungsEinheit = "Glätten";
                                                    break;
                                                case 2:
                                                    AusfuhrungsEinheit = "Glühen";
                                                    break;
                                                case 3:
                                                    AusfuhrungsEinheit = "Glühen + Glätten";
                                                    break;
                                            }
                                            break;
                                        case 4:
                                            NormText = "EN 10357";
                                            switch (int.Parse(GetFieldValue("Ausfuhrung", ReaderPos, "aufträgepositionen", "LaufendePositionsnummer")))
                                            {
                                                case 0:
                                                    AusfuhrungsEinheit = "CL1 CM";
                                                    break;
                                                case 1:
                                                    AusfuhrungsEinheit = "CL1 CD";
                                                    break;
                                                case 2:
                                                    AusfuhrungsEinheit = "CL1 BC";
                                                    break;
                                                case 3:
                                                    AusfuhrungsEinheit = "CL1 BD";
                                                    break;
                                                case 4:
                                                    AusfuhrungsEinheit = "CL2 CM";
                                                    break;
                                                case 5:
                                                    AusfuhrungsEinheit = "CL2 CD";
                                                    break;
                                                case 6:
                                                    AusfuhrungsEinheit = "CL2 BC";
                                                    break;
                                                case 7:
                                                    AusfuhrungsEinheit = "CL2 BD";
                                                    break;
                                            }
                                            break;
                                    }


                                    if (!String.IsNullOrEmpty(GetFieldValue("Schleifen", ReaderPos, "aufträgepositionen", "LaufendePositionsnummer")))
                                    {
                                        if (!String.IsNullOrEmpty(GetFieldValue("Körnung", ReaderPos, "aufträgepositionen", "LaufendePositionsnummer")) || GetFieldValue("Körnung", ReaderPos, "aufträgepositionen", "LaufendePositionsnummer") != "0")
                                        {
                                            SchleifenText = $", Geschliffen K{(GetFieldValue("Körnung", ReaderPos, "aufträgepositionen", "LaufendePositionsnummer"))}";
                                        }
                                        else
                                        {
                                            SchleifenText = ", Gebürstet";
                                        }
                                    }

                                    string Termin = GetFieldValue("Lieferdatum", ReaderPos, "aufträgepositionen", "LaufendePositionsnummer");
                                    DateTime DateTermin = DateTime.Parse(Termin);
                                    Termin = DateTermin.ToString("dd.MM.yyyy");

                                    // Initialize each array element before assigning values
                                    OCPositions[PosCounter] = new PDFOCPositionData
                                    {
                                        Position = (PosCounter).ToString(),
                                        AD = GetFieldValue("Außendurchmesser", GetFieldValue("Artikelnummer", ReaderPos, "aufträgepositionen", "LaufendePositionsnummer"), "artikelrohre", "Artikelnummer"),
                                        WS = GetFieldValue("Wandstärke", GetFieldValue("Artikelnummer", ReaderPos, "aufträgepositionen", "LaufendePositionsnummer"), "artikelrohre", "Artikelnummer"),
                                        Werkstoff = GetFieldValue("Werkstoff", GetFieldValue("Artikelnummer", ReaderPos, "aufträgepositionen", "LaufendePositionsnummer"), "artikelrohre", "Artikelnummer"),
                                        Lange = GetFieldValue("Solllänge", ReaderPos, "aufträgepositionen", "LaufendePositionsnummer"),
                                        Langetolmin = GetFieldValue("Längentoleranzmin", ReaderPos, "aufträgepositionen", "LaufendePositionsnummer"),
                                        Langetolmax = GetFieldValue("Längentoleranzmax", ReaderPos, "aufträgepositionen", "LaufendePositionsnummer"),
                                        Menge = GetFieldValue("Bestellmenge", ReaderPos, "aufträgepositionen", "LaufendePositionsnummer"),
                                        Mengetolmin = GetFieldValue("MengentoleranzMin", ReaderPos, "aufträgepositionen", "LaufendePositionsnummer"),
                                        Mengetolmax = GetFieldValue("MengentoleranzMax", ReaderPos, "aufträgepositionen", "LaufendePositionsnummer"),
                                        T1127D = GetFieldValue("1127D", ReaderPos, "aufträgepositionen", "LaufendePositionsnummer"),
                                        T1127T = GetFieldValue("1127T", ReaderPos, "aufträgepositionen", "LaufendePositionsnummer"),
                                        Liefertermin = Termin,
                                        Preis = GetFieldValue("Preis", ReaderPos, "aufträgepositionen", "LaufendePositionsnummer"),
                                        Norm = NormText,
                                        Ausfuhrung = AusfuhrungsEinheit,
                                        WAZ = WAZ,
                                        Bemerkung = GetFieldValue("Bemerkungen", ReaderPos, "aufträgepositionen", "LaufendePositionsnummer"),
                                        klMax = GetFieldValue("KLMax", ReaderPos, "aufträgepositionen", "LaufendePositionsnummer"),
                                        MengeEinheit = Mengeneinheit,
                                        MengetolEinheit = Mengentoleranzeinheit,
                                        PreisEinheit = Preiseinheit,
                                        Schleifen = SchleifenText,
                                    };

                                    PosCounter += 1;
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine(ex.Message);
                }

                PosCounter = 0;

                countQuery = $"SELECT LaufendeZuschlagsnummer FROM aufträgezuschläge WHERE Auftragsnummer = {Auftragsnummer}";

                Debug.WriteLine(countQuery);

                try
                {
                    using (MySqlConnection connection = new MySqlConnection(connectionString))
                    {
                        connection.Open();

                        using (MySqlCommand command = new MySqlCommand(countQuery, connection))
                        {

                            using (MySqlDataReader reader = command.ExecuteReader())
                            {
                                while (reader.Read())
                                {
                                    string ReaderInt = reader.GetValue(0).ToString();

                                    OCSurcharges[PosCounter] = new PDFOCSurcharge
                                    {
                                        Beschreibung = GetFieldValue("Beschreibung", ReaderInt, "aufträgezuschläge", "LaufendeZuschlagsnummer"),
                                        Menge = GetFieldValue("Menge", ReaderInt, "aufträgezuschläge", "LaufendeZuschlagsnummer"),
                                        Zuschlagsart = GetFieldValue("Zuschlagsart", ReaderInt, "aufträgezuschläge", "LaufendeZuschlagsnummer"),
                                    };
                                    PosCounter += 1;
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine(ex.Message);
                }
            }

            DocumentMetadata ABMetaData = new DocumentMetadata();

            ABMetaData.Subject = Auftragsnummer;
            ABMetaData.Keywords = "AB";



            Document.Create(container =>
            {

                container.Page(page =>
                {
                    page.Size(PageSizes.A4);
                    page.Margin(2, Unit.Centimetre);
                    page.PageColor(Colors.White);
                    page.DefaultTextStyle(x => x.FontSize(10));

                    page.Header()
                        .Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                                columns.ConstantColumn(30);
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                            });

                            // by using custom 'Element' method, we can reuse visual configuration
                            table.Cell().Row(1).Column(1).ColumnSpan(3).AlignRight().PaddingRight(30).Element(Block).Text("EHG Edelstahl Rohrherstellung GmbH, 08237 Steinberg, Deutschland").FontSize(6); ;
                            table.Cell().Row(2).ColumnSpan(4).PaddingTop(5).PaddingBottom(5).LineHorizontal(1).LineColor(Colors.Black);
                            table.Cell().RowSpan(9).Row(2).Column(4).PaddingTop(10).Element(Block).Image("LOGO.PNG");
                            table.Cell().Row(3).Column(1).Element(Block).Text("").FontSize(6);
                            table.Cell().Row(3).Column(3).Element(Block).Text("").FontSize(6);


                            table.Cell().Row(4).Column(1).Element(Block).Text(GetFieldValue("Firmenname", (GetFieldValue("Kundennummer", Auftragsnummer, "anfragen", "Anfragenummer")), "kunden", "Kundennummer")).FontSize(8);
                            table.Cell().Row(5).Column(1).Element(Block).Text($"{GetFieldValue("Rechnung_Straße", (GetFieldValue("Kundennummer", Auftragsnummer, "anfragen", "Anfragenummer")), "kunden", "Kundennummer")} {GetFieldValue("Rechnung_Hausnummer", (GetFieldValue("Kundennummer", txtInquiryNumber.Text, "anfragen", "Anfragenummer")), "kunden", "Kundennummer")}").FontSize(8);
                            table.Cell().Row(6).Column(1).Element(Block).Text($"{GetFieldValue("Rechnung_PLZ", (GetFieldValue("Kundennummer", Auftragsnummer, "anfragen", "Anfragenummer")), "kunden", "Kundennummer")} {GetFieldValue("Rechnung_Stadt", (GetFieldValue("Kundennummer", txtInquiryNumber.Text, "anfragen", "Anfragenummer")), "kunden", "Kundennummer")}").FontSize(8);
                            table.Cell().Row(7).Column(1).Element(Block).Text(GetFieldValue("Rechnung_Land", (GetFieldValue("Kundennummer", Auftragsnummer, "anfragen", "Anfragenummer")), "kunden", "Kundennummer")).FontSize(8);
                            table.Cell().Row(8).Column(1).Element(Block).Text($"Ansprechpartner: {GetFieldValue("Einkäufer_Name", (GetFieldValue("Kundennummer", Auftragsnummer, "anfragen", "Anfragenummer")), "kunden", "Kundennummer")}").FontSize(8);
                            table.Cell().Row(9).Column(1).Element(Block).Text($"E-Mail: {GetFieldValue("Einkäufer_EMail", (GetFieldValue("Kundennummer", Auftragsnummer, "anfragen", "Anfragenummer")), "kunden", "Kundennummer")}").FontSize(8);
                            table.Cell().Row(10).Column(1).Element(Block).Text($"Telefon: {GetFieldValue("Einkäufer_Telefonnummer", (GetFieldValue("Kundennummer", Auftragsnummer, "anfragen", "Anfragenummer")), "kunden", "Kundennummer")}").FontSize(8);

                            table.Cell().Row(4).Column(3).Element(Block).Text("Sachbearbeiter: Lukas Kuhn").FontSize(8);
                            table.Cell().Row(5).Column(3).Element(Block).Text("E-Mail: l.kuhn@ehg-steinberg.de").FontSize(8);
                            table.Cell().Row(8).Column(3).PaddingTop(-19).Element(Block).Text("Telefon: +49 (0) 37462 688-18").FontSize(8);

                            table.Cell().Row(10).ColumnSpan(4).PaddingTop(20).Element(Block).Text($"Auftragsbestätigung {Auftragsnummer}").FontSize(14);


                            table.Cell().Row(11).ColumnSpan(4).PaddingTop(10).LineHorizontal(2).LineColor(Colors.Red.Darken2);

                            // for simplicity, you can also use extension method described in the "Extending DSL" section
                            static IContainer Block(IContainer container)
                            {
                                return container
                                    .AlignLeft();
                            }
                        });

                    page.Content()
                        .PaddingVertical(1, Unit.Centimetre)
                        .Column(column =>
                        {
                            column.Item().PaddingBottom(10).Text("Wir bedanken uns für Ihre Anfrage, und erlauben uns, Ihnen freibleibend und zu unseren AGB wie folgt anzubieten:");

                            foreach (var position in OCPositions)
                            {
                                column.Item().Column(columnPos =>
                                {
                                    columnPos.Item().EnsureSpace(50);
                                    columnPos.Item().PaddingTop(10).Text($"Pos. {(int.Parse(position.Position) + 1).ToString()}");
                                    columnPos.Item().Text($"WIG - geschweißte Edelstahlrohre, {position.Norm} {position.Ausfuhrung}{position.Schleifen}, EN ISO 1127 D{position.T1127D} / T{position.T1127T}, Werkstoff {position.Werkstoff}, {position.WAZ}");
                                    columnPos.Item().Text($"{position.Menge} {position.MengeEinheit}        L: {position.Lange} - {position.Langetolmin} / +{position.Langetolmax}            {position.AD} x {position.WS} mm           {position.Preis} {position.PreisEinheit}");
                                    columnPos.Item().Text($"LT: {position.Liefertermin} u.V.");
                                    columnPos.Item().Text($"Mengentoleranz: -{position.Mengetolmin}/+{position.Mengetolmax} {position.MengetolEinheit} - event. Unterlängen bis max. {position.klMax} %");
                                    columnPos.Item().Text($"{position.Bemerkung}");
                                });
                            }

                            column.Item().EnsureSpace(100);
                            column.Item().PaddingTop(10).Text("Preise effektiv, inkl. LZ");
                            column.Item().Text("zzgl.Mwst.");
                            foreach (var position in OCSurcharges)
                            {
                                column.Item().Column(columnSurcharge =>
                                {
                                    columnSurcharge.Item().Text($"+ {position.Beschreibung} {position.Menge}€ {position.Zuschlagsart}");
                                });
                            }
                        });


                    page.Footer()

                        .AlignLeft()
                        .Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                                columns.RelativeColumn();
                            });

                            // by using custom 'Element' method, we can reuse visual configuration
                            table.Cell().Row(1).Column(1).Element(Block).Text("EHG Edelstahl Rohrherstellung GmbH").FontSize(6);
                            table.Cell().Row(2).Column(1).Element(Block).Text("Gewerbestraße 3").FontSize(6);
                            table.Cell().Row(3).Column(1).Element(Block).Text("08237 Steinberg, OT Rothenkirchen").FontSize(6);
                            table.Cell().Row(4).Column(1).Element(Block).Text("Deutschland").FontSize(6);
                            table.Cell().Row(5).Column(1).Element(Block).Text("Telefon +49 (0) 37462 688-0").FontSize(6);
                            table.Cell().Row(6).Column(1).Element(Block).Text("Telefax +49 (0) 37462 688-22").FontSize(6);
                            table.Cell().Row(7).Column(1).Element(Block).Text("www.ehg-steinberg.de").FontSize(6);
                            table.Cell().Row(8).Column(1).Element(Block).Text("info@ehg-steinberg.de").FontSize(6);
                            table.Cell().Row(9).Column(1).Element(Block).Text("").FontSize(6);
                            table.Cell().ColumnSpan(4).Element(Block).Text("Wir arbeiten ausschließlich auf der Grundlage unserer umseitig aufgedruckten allgemeinen Verkaufsbedingungen (Stand 03.2012)").FontSize(6); ;
                            table.Cell().Row(1).Column(2).Element(Block).Text("Vetriebsbüro Weinstadt").FontSize(6);
                            table.Cell().Row(2).Column(2).Element(Block).Text("Heinkelstraße 4").FontSize(6);
                            table.Cell().Row(3).Column(2).Element(Block).Text("71384 Weinstadt").FontSize(6);
                            table.Cell().Row(4).Column(2).Element(Block).Text("Deutschland").FontSize(6);
                            table.Cell().Row(5).Column(2).Element(Block).Text("Telefon +49 (0) 7151 132-0").FontSize(6);
                            table.Cell().Row(6).Column(2).Element(Block).Text("Telefax +49 (0) 7151 132-105").FontSize(6);
                            table.Cell().Row(7).Column(2).Element(Block).Text("www.ehg-steinberg.de").FontSize(6);
                            table.Cell().Row(8).Column(2).Element(Block).Text("info@ehg-waiblingen.de").FontSize(6);
                            table.Cell().Row(1).Column(3).Element(Block).Text("HRB 4364 AG Chemnitz").FontSize(6);
                            table.Cell().Row(2).Column(3).Element(Block).Text("Geschäftsführerin A.Horlacher").FontSize(6);
                            table.Cell().Row(3).Column(3).Element(Block).Text("Ust.IdNr. DE 141034306").FontSize(6);
                            table.Cell().Row(4).Column(3).Element(Block).Text("Ust.Nr. 22310804219").FontSize(6);
                            table.Cell().Row(1).Column(4).Element(Block).Text("Commerzbank AG").FontSize(6);
                            table.Cell().Row(2).Column(4).Element(Block).Text("IBAN: DE57 8704 0000 0255 4020 00").FontSize(6);
                            table.Cell().Row(10).Column(4).AlignRight().Element(Block).Text(text =>
                            {
                                text.Span("Seite ").FontSize(6);
                                text.CurrentPageNumber().FontSize(6);
                                text.Span(" von ").FontSize(6);
                                text.TotalPages().FontSize(6);
                            });

                            // for simplicity, you can also use extension method described in the "Extending DSL" section
                            static IContainer Block(IContainer container)
                            {
                                return container
                                    .AlignLeft();
                            }
                        });

                });
            })
            .WithMetadata(ABMetaData)

            .GeneratePdf($"{PPcN.Properties.Settings.Default.DocumentSaveLocation}/Auftragsbestätigung {Auftragsnummer}.pdf");

            using var process = new Process
            {
                StartInfo = new ProcessStartInfo($"{PPcN.Properties.Settings.Default.DocumentSaveLocation}/Auftragsbestätigung {Auftragsnummer}.pdf")
                {
                    UseShellExecute = true
                }
            };

            process.Start();
        }

        public struct PDFOCPositionData
        {
            public string Position;
            public string AD;
            public string WS;
            public string Werkstoff;
            public string Lange;
            public string Langetolmin;
            public string Langetolmax;
            public string Menge;
            public string MengeEinheit;
            public string Mengetolmin;
            public string Mengetolmax;
            public string MengetolEinheit;
            public string T1127D;
            public string T1127T;
            public string Liefertermin;
            public string Preis;
            public string PreisEinheit;
            public string Norm;
            public string Ausfuhrung;
            public string WAZ;
            public string Bemerkung;
            public string klMax;
            public string Schleifen;
        }

        public struct PDFOCSurcharge
        {
            public string Beschreibung;
            public string Menge;
            public string Zuschlagsart;
        }

        //Following is to add any Surcharges

        private void btnAddSurcharge_Click(object sender, EventArgs e)
        {
            if (!String.IsNullOrEmpty(txtOrderOrderNumberSearch.Text) && !String.IsNullOrEmpty(txtSurchargeCost.Text) && !String.IsNullOrEmpty(txtSurchargeDesc.Text) && cmbSurchargeType.SelectedItem != "")
            {

                bool isValid = decimal.TryParse(txtSurchargeCost.Text, out decimal surchargeCost);

                if (isValid)
                {
                    // Retrieve the values from the text fields and combo box
                    string orderNumber = txtOrderOrderNumberSearch.Text;
                    string surchargeDesc = txtSurchargeDesc.Text;
                    string surchargeType = cmbSurchargeType.SelectedItem.ToString();

                    // Define the SQL query
                    string query = "INSERT INTO aufträgezuschläge (Auftragsnummer, Menge, Beschreibung, Zuschlagsart) VALUES (@OrderNumber, @SurchargeCost, @SurchargeDesc, @SurchargeType)";

                    // Create a connection to the database
                    using (MySqlConnection connection = new MySqlConnection(connectionString))
                    {
                        try
                        {
                            // Open the connection
                            connection.Open();

                            // Create a MySqlCommand object
                            using (MySqlCommand command = new MySqlCommand(query, connection))
                            {
                                // Define the parameters and their values
                                command.Parameters.AddWithValue("@OrderNumber", orderNumber);
                                command.Parameters.AddWithValue("@SurchargeCost", surchargeCost);
                                command.Parameters.AddWithValue("@SurchargeDesc", surchargeDesc);
                                command.Parameters.AddWithValue("@SurchargeType", surchargeType);

                                // Execute the query
                                command.ExecuteNonQuery();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show($"Error: {ex.Message}");
                        }
                    }
                }
            }

            // Clear the existing items and columns
            listSurcharge.Items.Clear();
            listSurcharge.Columns.Clear();

            // Add columns to the ListView
            listSurcharge.Columns.Add("Zuschlagsart", 100);
            listSurcharge.Columns.Add("Beschreibung", 100);
            listSurcharge.Columns.Add("Menge", 100);

            // Fetch rows from the database
            List<string[]> rows = GetRows(txtOrderOrderNumberSearch.Text);

            // Add each row to the ListView
            foreach (var row in rows)
            {
                listSurcharge.Items.Add(new ListViewItem(row));
            }

        }

        private List<string[]> GetRows(string auftragsnummer)
        {
            var results = new List<string[]>();

            using (MySqlConnection conn = new MySqlConnection(connectionString))
            {
                conn.Open();
                string query = "SELECT Zuschlagsart, Beschreibung, Menge FROM aufträgezuschläge WHERE Auftragsnummer = @Auftragsnummer";

                using (MySqlCommand cmd = new MySqlCommand(query, conn))
                {
                    cmd.Parameters.AddWithValue("@Auftragsnummer", auftragsnummer);

                    using (MySqlDataReader reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            string zuschlagsart = reader["Zuschlagsart"].ToString();
                            string beschreibung = reader["Beschreibung"].ToString();
                            string menge = reader["Menge"].ToString();
                            results.Add(new string[] { zuschlagsart, beschreibung, menge });
                        }
                    }
                }
            }

            return results;
        }

        private void btnDeleteSurcharge_Click(object sender, EventArgs e)
        {

            // Ensure at least one item is selected
            if (listSurcharge.SelectedItems.Count == 0)
            {
                MessageBox.Show("Please select an item to delete.", "No Selection", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            // Assuming the first column is the primary key or unique identifier
            string selectedItemSurchargeType = listSurcharge.SelectedItems[0].SubItems[0].Text;
            string selectedItemDescription = listSurcharge.SelectedItems[0].SubItems[1].Text;
            string selectedItemAmount = listSurcharge.SelectedItems[0].SubItems[2].Text;
            string orderNumber = txtOrderOrderNumberSearch.Text;

            // Display a confirmation message box
            DialogResult result = MessageBox.Show(
                $"Do you really want to delete the following item?{Environment.NewLine}" +
                $"Zuschlagsart: {selectedItemSurchargeType}{Environment.NewLine}" +
                $"Beschreibung: {selectedItemDescription}{Environment.NewLine}" +
                $"Menge: {selectedItemAmount}{Environment.NewLine}",
                "Confirm Delete",
                MessageBoxButtons.YesNo,
                MessageBoxIcon.Question);

            // Check the Length of the MessageBox
            if (result == DialogResult.Yes)
            {
                try
                {
                    using (MySqlConnection conn = new MySqlConnection(connectionString))
                    {
                        conn.Open();

                        string query = "DELETE FROM zuschläge WHERE Auftragsnummer = @orderNumber AND Zuschlagsart = @surchargeType AND Beschreibung = @description AND Menge = @amount LIMIT 1";

                        using (MySqlCommand cmd = new MySqlCommand(query, conn))
                        {
                            cmd.Parameters.AddWithValue("@orderNumber", orderNumber);
                            cmd.Parameters.AddWithValue("@surchargeType", selectedItemSurchargeType);
                            cmd.Parameters.AddWithValue("@description", selectedItemDescription);
                            cmd.Parameters.AddWithValue("@amount", selectedItemAmount);

                            int rowsAffected = cmd.ExecuteNonQuery();
                            if (rowsAffected > 0)
                            {
                                MessageBox.Show("Item deleted successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                listSurcharge.Items.Remove(listSurcharge.SelectedItems[0]);
                            }
                            else
                            {
                                MessageBox.Show("No item found with the specified details.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"An error occurred while deleting the item: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }




            // Clear the existing items and columns
            listSurcharge.Items.Clear();
            listSurcharge.Columns.Clear();

            // Add columns to the ListView
            listSurcharge.Columns.Add("Zuschlagsart", 100);
            listSurcharge.Columns.Add("Beschreibung", 100);
            listSurcharge.Columns.Add("Menge", 100);

            // Fetch rows from the database
            List<string[]> rows = GetRows(txtOrderOrderNumberSearch.Text);

            // Add each row to the ListView
            foreach (var row in rows)
            {
                listSurcharge.Items.Add(new ListViewItem(row));
            }
        }

        //Following is to load information for material

        private void LoadMaterialList()
        {
            listStorageCoilsMaterialCreationMaterials.Items.Clear();

            try
            {
                using (MySqlConnection connection = new MySqlConnection(connectionString))
                {
                    connection.Open();

                    string query = "SELECT * FROM `prostahl`.`werkstoffe`";
                    MySqlCommand command = new MySqlCommand(query, connection);

                    using (MySqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            // Read values from columns
                            string readout = reader.GetString(0); // Assuming the searched value is at index 1

                            // Do something with the values...
                            listStorageCoilsMaterialCreationMaterials.Items.Add(readout);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error: " + ex.Message);
            }
        }

        





        //Following is to populate the Article Selection List View in Order Creation

        private void txtOrderPositionWT_TextChanged(object sender, EventArgs e)
        {
            if (boollistOrderPositionArticleProgSelection == false)
            {
                PopulateOrderCreationArticleSelectionList();
                listOrderCreationPositionMaterials.Items.Clear();
                OrderCreationPositionMaterialsRefresh();
            }

            OrderOrderCreationPosition_CalculateTolerances();
        }

        private void txtOrderPositionOD_TextChanged(object sender, EventArgs e)
        {
            if (boollistOrderPositionArticleProgSelection == false)
            {
                PopulateOrderCreationArticleSelectionList();
                listOrderCreationPositionMaterials.Items.Clear();
                OrderCreationPositionMaterialsRefresh();
            }

            OrderOrderCreationPosition_CalculateTolerances();
        }

        private void PopulateOrderCreationArticleSelectionList()
        {
            listOrderPositionArticle.Items.Clear();
            listOrderPositionArticle.Columns.Clear(); // Clear existing columns before adding new ones

            // Add columns
            listOrderPositionArticle.Columns.Add("Außendurchmesser");
            listOrderPositionArticle.Columns.Add("Wandstärke");
            listOrderPositionArticle.Columns.Add("Werkstoff");

            string query = "SELECT `Außendurchmesser`, `Wandstärke`, `Werkstoff` FROM `prostahl`.`artikelrohre` WHERE 1=1";

            if (!String.IsNullOrEmpty(txtInquiryPositionWT.Text))
            {
                float value;

                // Replace comma with dot for consistent decimal format
                string input = txtOrderPositionWT.Text.Replace(',', '.');

                // Try parsing the input as a float
                if (float.TryParse(input, NumberStyles.Float, CultureInfo.InvariantCulture, out value))
                {
                    // Format the value to a string with a dot as the decimal separator
                    query += $" AND `Wandstärke` LIKE '%{value.ToString(CultureInfo.InvariantCulture)}%'";
                }
            }

            if (!String.IsNullOrEmpty(txtOrderPositionOD.Text))
            {
                float value;

                // Replace comma with dot for consistent decimal format
                string input = txtOrderPositionOD.Text.Replace(',', '.');

                // Try parsing the input as a float
                if (float.TryParse(input, NumberStyles.Float, CultureInfo.InvariantCulture, out value))
                {
                    // Format the value to a string with a dot as the decimal separator
                    query += $" AND `Außendurchmesser` LIKE '%{value.ToString(CultureInfo.InvariantCulture)}%'";
                }
            }

            if (listOrderPositionArticle.SelectedItems.Count > 0 && !String.IsNullOrEmpty(listOrderPositionArticle.SelectedItems.ToString()))
            {
                query += $" AND `Werkstoff` = {listOrderPositionArticle.SelectedItems.ToString()}";
            }

            query += " ORDER BY `Werkstoff` ASC LIMIT 1000";

            Debug.WriteLine(query);

            try
            {
                using (MySqlConnection connection = new MySqlConnection(connectionString))
                {
                    connection.Open();

                    using (MySqlCommand command = new MySqlCommand(query, connection))
                    {

                        using (MySqlDataReader reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                ListViewItem item = new ListViewItem(reader.GetValue(0).ToString());
                                item.SubItems.Add(reader.GetValue(1).ToString());
                                item.SubItems.Add(reader.GetString(2).ToString());
                                listOrderPositionArticle.Items.Add(item);

                            }
                        }
                    }



                    // Resize columns based on content
                    listOrderPositionArticle.Columns[0].AutoResize(ColumnHeaderAutoResizeStyle.HeaderSize);
                    listOrderPositionArticle.Columns[1].AutoResize(ColumnHeaderAutoResizeStyle.HeaderSize);
                    listOrderPositionArticle.Columns[2].AutoResize(ColumnHeaderAutoResizeStyle.HeaderSize);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }
        }

        private void OrderCreationPositionMaterialsRefresh()
        {
            if (listOrderCreationPositionMaterials.SelectedItems.Count == 0)
            {
                string query = $"SELECT * FROM `prostahl`.`werkstoffe` ORDER BY `Werkstoff` ASC LIMIT 1000;\r\n";

                //This Code block is for the Listbox for Material Selection
                listOrderCreationPositionMaterials.Items.Clear();

                try
                {
                    using (MySqlConnection connection = new MySqlConnection(connectionString))
                    {
                        connection.Open();


                        MySqlCommand command = new MySqlCommand(query, connection);

                        using (MySqlDataReader reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                // Read values from columns
                                string readout = reader.GetString(1); // Assuming the searched value is at index 1

                                // Do something with the values...
                                listOrderCreationPositionMaterials.Items.Add(readout);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Error: " + ex.Message);
                }
            }
        }

        private void btnCreatePosition_Click(object sender, EventArgs e)
        {
            ListViewItem selectedItem = null;
            if (String.IsNullOrEmpty(txtOrderOrderCreationPosition.Text) || listOrderCreationPositions.SelectedIndex > -1)
            {
                selectedItem = listOrderPositionArticle.SelectedItems[0];
            }
            else if (!String.IsNullOrEmpty(txtOrderOrderNumberSearch.Text) && (listOrderCreationPositions.SelectedIndex == -1 || txtOrderOrderCreationPosition.Text != null))
            {
                selectedItem = listOrderPositionArticle.Items[0];
            }
            string AD = txtOrderPositionOD.Text.Replace(',', '.');
            string WS = txtOrderPositionWT.Text.Replace(',', '.');
            string Werkstoff = selectedItem.SubItems[2].Text.Replace(',', '.');

            string query = $"SELECT Artikelnummer FROM `prostahl`.`artikelrohre` WHERE 1=1 AND `Außendurchmesser` = {AD} AND `Werkstoff` = '{Werkstoff}' AND `Wandstärke` = {WS} ORDER BY `Werkstoff` ASC LIMIT 1000\r\n";


            Debug.WriteLine(query);

            try
            {
                using (MySqlConnection connection = new MySqlConnection(connectionString))
                {
                    connection.Open();

                    using (MySqlCommand command = new MySqlCommand(query, connection))
                    {

                        using (MySqlDataReader reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                ArticleNumber = reader.GetValue(0).ToString();
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }

            if (!String.IsNullOrEmpty(ArticleNumber))
            {

                // Display a MessageBox with two buttons
                DialogResult result = MessageBox.Show(
                    $"Außendurchmesser: {AD}{Environment.NewLine}" +
                    $"Wandstärke: {WS}{Environment.NewLine}" +
                    $"Werkstoff: {Werkstoff}{Environment.NewLine}" +
                    $"Artikelnummer: {ArticleNumber}{Environment.NewLine}" +
                    $"Soll Länge: {txtOrderPositionSetLength.Text ?? ""}{Environment.NewLine}" +
                    $"Längentoleranz: -{txtOrderPositionLengthToleranceMin.Text ?? ""}/+{txtOrderPositionLengthToleranceMax.Text ?? ""}{Environment.NewLine}" +
                    $"Bestellmenge: {txtOrderPositionOrderQuantity.Text ?? ""} {cmbOrderPositionOrderQuantityUnit.SelectedItem.ToString()}{Environment.NewLine}" +
                    $"Mengentoleranz: {txtOrderPositionQuantityToleranceMin.Text ?? ""}-{txtOrderPositionQuantityToleranceMax.Text ?? ""} {cmbOrderPositionQuantityToleranceUnit.SelectedItem.ToString()}{Environment.NewLine}" +
                    $"Preis: {txtOrderPositionPrice.Text ?? ""} {cmbOrderPositionPriceUnit.SelectedItem.ToString()}{Environment.NewLine}" +
                    $"Bürsten: {chkOrderPositionBrushing.Checked} {Environment.NewLine}" +
                    $"Vorrat: {chkOrderPositionStock.Checked} {Environment.NewLine}" +
                    $"Körnung: {txtOrderPositionBrushingQuality.Text ?? ""}{Environment.NewLine}" +
                    $"Anmerkungen: {txtOrderPositionAnnotation.Text ?? ""}{Environment.NewLine}" +
                    $"Liefertermin: {dateOrderPositionDeliveryterm.Value.ToString()}{Environment.NewLine}" +
                    $"Festtermin: {chkOrderPositionFixDate.Checked}{Environment.NewLine}{Environment.NewLine}" +
                    $"Kalenderwoche LT: {chkOrderPositionWeek.Checked}{Environment.NewLine}" +
                    $"D?: {cmbOrderPositionEN1127D.SelectedItem?.ToString() ?? ""}{Environment.NewLine}" +
                    $"T?: {cmbOrderPositionEN1127T.SelectedItem?.ToString() ?? ""}{Environment.NewLine}" +
                    $"Norm: {cmbOrderPositionNorm.SelectedItem.ToString()}{Environment.NewLine}" +
                    $"Ausführung: {cmbOrderPositionExec.SelectedItem.ToString()}{Environment.NewLine}" +
                    $"WAZ: {cmbOrderPositionWAZ.SelectedItem.ToString()}{Environment.NewLine}" +
                    $"KL Max.: {txtOrderPositionKL.Text ?? ""}{Environment.NewLine}" +
                    $"Min. Außendurchmesser: {txtOrderPositionODTolMin.Text ?? ""}{Environment.NewLine}" +
                    $"Max. Außendurchmesser: {txtOrderPositionODTolMax.Text ?? ""}{Environment.NewLine}" +
                    $"Max. Wandstärke: {txtOrderPositionWTTolMin.Text ?? ""}{Environment.NewLine}" +
                    $"Min. Wandstärke: {txtOrderPositionWTTolMax.Text ?? ""}",
                    "Confirm Details", // Title of the message box
                    MessageBoxButtons.YesNo // Buttons for the message box
                );



                //// Check the Length of the MessageBox and change insertion for proper Order! 
                if (result == DialogResult.Yes)
                {
                    if (!String.IsNullOrEmpty(txtOrderOrderNumberSearch.Text) && (listOrderCreationPositions.SelectedIndex.ToString() != "-1" || txtOrderOrderCreationPosition.Text != ""))
                    {
                        string Positionsnummer = "";
                        if (listOrderCreationPositions.SelectedIndex > -1)
                        {
                            Positionsnummer = listOrderCreationPositions.SelectedItem.ToString();
                        }
                        else if (txtOrderOrderCreationPosition.Text != "")
                        {
                            Positionsnummer = txtOrderOrderCreationPosition.Text;
                        }

                        //Laufende Positionsnummer ??? 
                        string LaufendePositionsnummer = "";

                        query = $"SELECT `LaufendePositionsnummer` FROM `prostahl`.`aufträgepositionen` WHERE `Auftragsnummer` LIKE '{txtOrderOrderNumberSearch.Text}' AND `Auftragsposition` LIKE '{Positionsnummer}' ORDER BY `LaufendePositionsnummer` ASC LIMIT 1";

                        Debug.WriteLine(query);

                        try
                        {
                            using (MySqlConnection connection = new MySqlConnection(connectionString))
                            {
                                connection.Open();

                                using (MySqlCommand command = new MySqlCommand(query, connection))
                                {

                                    using (MySqlDataReader reader = command.ExecuteReader())
                                    {
                                        while (reader.Read())
                                        {
                                            LaufendePositionsnummer = reader.GetValue(0).ToString();
                                        }
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            Debug.WriteLine(ex.Message);
                        }

                        string row = "Artikelnummer";
                        string textbox = ArticleNumber;
                        string updateQuery = $"UPDATE aufträgepositionen SET {row} = '{textbox}' WHERE LaufendePositionsnummer = '{LaufendePositionsnummer}'";

                        try
                        {
                            using (MySqlConnection connection = new MySqlConnection(connectionString))
                            {
                                connection.Open();
                                MySqlCommand command = new MySqlCommand(updateQuery, connection);

                                command.ExecuteNonQuery();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error: " + ex.Message);
                        }

                        row = "Solllänge";
                        textbox = txtOrderPositionSetLength.Text.Replace(',', '.');
                        updateQuery = $"UPDATE aufträgepositionen SET {row} = '{textbox}' WHERE LaufendePositionsnummer = '{LaufendePositionsnummer}'";

                        try
                        {
                            using (MySqlConnection connection = new MySqlConnection(connectionString))
                            {
                                connection.Open();
                                MySqlCommand command = new MySqlCommand(updateQuery, connection);

                                command.ExecuteNonQuery();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error: " + ex.Message);
                        }

                        row = "Längentoleranzmax";
                        textbox = txtOrderPositionLengthToleranceMax.Text.Replace(',', '.');
                        updateQuery = $"UPDATE aufträgepositionen SET {row} = '{textbox}' WHERE LaufendePositionsnummer = '{LaufendePositionsnummer}'";

                        try
                        {
                            using (MySqlConnection connection = new MySqlConnection(connectionString))
                            {
                                connection.Open();
                                MySqlCommand command = new MySqlCommand(updateQuery, connection);

                                command.ExecuteNonQuery();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error: " + ex.Message);
                        }

                        row = "Längentoleranzmin";
                        textbox = txtOrderPositionLengthToleranceMin.Text.Replace(',', '.');
                        updateQuery = $"UPDATE aufträgepositionen SET {row} = '{textbox}' WHERE LaufendePositionsnummer = '{LaufendePositionsnummer}'";

                        try
                        {
                            using (MySqlConnection connection = new MySqlConnection(connectionString))
                            {
                                connection.Open();
                                MySqlCommand command = new MySqlCommand(updateQuery, connection);

                                command.ExecuteNonQuery();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error: " + ex.Message);
                        }

                        row = "Bestellmenge";
                        textbox = txtOrderPositionOrderQuantity.Text.Replace(',', '.');
                        updateQuery = $"UPDATE aufträgepositionen SET {row} = '{textbox}' WHERE LaufendePositionsnummer = '{LaufendePositionsnummer}'";

                        try
                        {
                            using (MySqlConnection connection = new MySqlConnection(connectionString))
                            {
                                connection.Open();
                                MySqlCommand command = new MySqlCommand(updateQuery, connection);

                                command.ExecuteNonQuery();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error: " + ex.Message);
                        }

                        row = "BestellmengeEinheit";
                        textbox = cmbOrderPositionOrderQuantityUnit.SelectedIndex.ToString();
                        updateQuery = $"UPDATE aufträgepositionen SET {row} = '{textbox}' WHERE LaufendePositionsnummer = '{LaufendePositionsnummer}'";

                        try
                        {
                            using (MySqlConnection connection = new MySqlConnection(connectionString))
                            {
                                connection.Open();
                                MySqlCommand command = new MySqlCommand(updateQuery, connection);

                                command.ExecuteNonQuery();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error: " + ex.Message);
                        }

                        row = "MengentoleranzMin";
                        textbox = txtOrderPositionQuantityToleranceMin.Text.Replace(',', '.');
                        updateQuery = $"UPDATE aufträgepositionen SET {row} = '{textbox}' WHERE LaufendePositionsnummer = '{LaufendePositionsnummer}'";

                        try
                        {
                            using (MySqlConnection connection = new MySqlConnection(connectionString))
                            {
                                connection.Open();
                                MySqlCommand command = new MySqlCommand(updateQuery, connection);

                                command.ExecuteNonQuery();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error: " + ex.Message);
                        }

                        row = "MengentoleranzMax";
                        textbox = txtOrderPositionQuantityToleranceMax.Text.Replace(',', '.');
                        updateQuery = $"UPDATE aufträgepositionen SET {row} = '{textbox}' WHERE LaufendePositionsnummer = '{LaufendePositionsnummer}'";

                        try
                        {
                            using (MySqlConnection connection = new MySqlConnection(connectionString))
                            {
                                connection.Open();
                                MySqlCommand command = new MySqlCommand(updateQuery, connection);

                                command.ExecuteNonQuery();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error: " + ex.Message);
                        }

                        row = "MengentoleranzEinheit";
                        textbox = cmbOrderPositionQuantityToleranceUnit.SelectedIndex.ToString();
                        updateQuery = $"UPDATE aufträgepositionen SET {row} = '{textbox}' WHERE LaufendePositionsnummer = '{LaufendePositionsnummer}'";

                        try
                        {
                            using (MySqlConnection connection = new MySqlConnection(connectionString))
                            {
                                connection.Open();
                                MySqlCommand command = new MySqlCommand(updateQuery, connection);

                                command.ExecuteNonQuery();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error: " + ex.Message);
                        }

                        row = "Preis";
                        textbox = txtOrderPositionPrice.Text.Replace(',', '.');
                        updateQuery = $"UPDATE aufträgepositionen SET {row} = '{textbox}' WHERE LaufendePositionsnummer = '{LaufendePositionsnummer}'";

                        try
                        {
                            using (MySqlConnection connection = new MySqlConnection(connectionString))
                            {
                                connection.Open();
                                MySqlCommand command = new MySqlCommand(updateQuery, connection);

                                command.ExecuteNonQuery();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error: " + ex.Message);
                        }

                        row = "PreisEinheit";
                        textbox = cmbOrderPositionPriceUnit.SelectedIndex.ToString();
                        updateQuery = $"UPDATE aufträgepositionen SET {row} = '{textbox}' WHERE LaufendePositionsnummer = '{LaufendePositionsnummer}'";

                        try
                        {
                            using (MySqlConnection connection = new MySqlConnection(connectionString))
                            {
                                connection.Open();
                                MySqlCommand command = new MySqlCommand(updateQuery, connection);

                                command.ExecuteNonQuery();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error: " + ex.Message);
                        }

                        row = "Schleifen";
                        if (chkOrderPositionBrushing.Checked)
                        {
                            textbox = "1";
                        }
                        else
                        {
                            textbox = "0";
                        }
                        updateQuery = $"UPDATE aufträgepositionen SET {row} = '{textbox}' WHERE LaufendePositionsnummer = '{LaufendePositionsnummer}'";

                        try
                        {
                            using (MySqlConnection connection = new MySqlConnection(connectionString))
                            {
                                connection.Open();
                                MySqlCommand command = new MySqlCommand(updateQuery, connection);

                                command.ExecuteNonQuery();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error: " + ex.Message);
                        }

                        row = "Körnung";
                        textbox = txtOrderPositionBrushingQuality.Text.Replace(',', '.');
                        updateQuery = $"UPDATE aufträgepositionen SET {row} = '{textbox}' WHERE LaufendePositionsnummer = '{LaufendePositionsnummer}'";

                        try
                        {
                            using (MySqlConnection connection = new MySqlConnection(connectionString))
                            {
                                connection.Open();
                                MySqlCommand command = new MySqlCommand(updateQuery, connection);

                                command.ExecuteNonQuery();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error: " + ex.Message);
                        }

                        row = "Bemerkungen";
                        textbox = txtOrderPositionAnnotation.Text;
                        updateQuery = $"UPDATE aufträgepositionen SET {row} = '{textbox}' WHERE LaufendePositionsnummer = '{LaufendePositionsnummer}'";

                        try
                        {
                            using (MySqlConnection connection = new MySqlConnection(connectionString))
                            {
                                connection.Open();
                                MySqlCommand command = new MySqlCommand(updateQuery, connection);

                                command.ExecuteNonQuery();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error: " + ex.Message);
                        }

                        row = "Lieferdatum";
                        textbox = dateOrderPositionDeliveryterm.Value.ToString("yyyy-MM-dd");
                        updateQuery = $"UPDATE aufträgepositionen SET {row} = '{textbox}' WHERE LaufendePositionsnummer = '{LaufendePositionsnummer}'";
                        try
                        {
                            using (MySqlConnection connection = new MySqlConnection(connectionString))
                            {
                                connection.Open();
                                MySqlCommand command = new MySqlCommand(updateQuery, connection);

                                command.ExecuteNonQuery();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error: " + ex.Message);
                        }

                        row = "FixTermin";
                        if (chkOrderPositionFixDate.Checked)
                        {
                            textbox = "1";
                        }
                        else
                        {
                            textbox = "0";
                        }
                        updateQuery = $"UPDATE aufträgepositionen SET {row} = '{textbox}' WHERE LaufendePositionsnummer = '{LaufendePositionsnummer}'";

                        try
                        {
                            using (MySqlConnection connection = new MySqlConnection(connectionString))
                            {
                                connection.Open();
                                MySqlCommand command = new MySqlCommand(updateQuery, connection);

                                command.ExecuteNonQuery();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error: " + ex.Message);
                        }

                        row = "Kalenderwoche";
                        if (chkOrderPositionWeek.Checked)
                        {
                            textbox = "1";
                        }
                        else
                        {
                            textbox = "0";
                        }
                        updateQuery = $"UPDATE aufträgepositionen SET {row} = '{textbox}' WHERE LaufendePositionsnummer = '{LaufendePositionsnummer}'";

                        try
                        {
                            using (MySqlConnection connection = new MySqlConnection(connectionString))
                            {
                                connection.Open();
                                MySqlCommand command = new MySqlCommand(updateQuery, connection);

                                command.ExecuteNonQuery();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error: " + ex.Message);
                        }

                        row = "ADTolMin";
                        textbox = txtOrderPositionODTolMin.Text.Replace(',', '.');
                        updateQuery = $"UPDATE aufträgepositionen SET {row} = '{textbox}' WHERE LaufendePositionsnummer = '{LaufendePositionsnummer}'";

                        try
                        {
                            using (MySqlConnection connection = new MySqlConnection(connectionString))
                            {
                                connection.Open();
                                MySqlCommand command = new MySqlCommand(updateQuery, connection);

                                command.ExecuteNonQuery();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error: " + ex.Message);
                        }

                        row = "ADTolMax";
                        textbox = txtOrderPositionODTolMax.Text.Replace(',', '.');
                        updateQuery = $"UPDATE aufträgepositionen SET {row} = '{textbox}' WHERE LaufendePositionsnummer = '{LaufendePositionsnummer}'";

                        try
                        {
                            using (MySqlConnection connection = new MySqlConnection(connectionString))
                            {
                                connection.Open();
                                MySqlCommand command = new MySqlCommand(updateQuery, connection);

                                command.ExecuteNonQuery();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error: " + ex.Message);
                        }

                        row = "WSTolMin";
                        textbox = txtOrderPositionWTTolMin.Text.Replace(',', '.');
                        updateQuery = $"UPDATE aufträgepositionen SET {row} = '{textbox}' WHERE LaufendePositionsnummer = '{LaufendePositionsnummer}'";

                        try
                        {
                            using (MySqlConnection connection = new MySqlConnection(connectionString))
                            {
                                connection.Open();
                                MySqlCommand command = new MySqlCommand(updateQuery, connection);

                                command.ExecuteNonQuery();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error: " + ex.Message);
                        }

                        row = "WSTolMax";
                        textbox = txtOrderPositionWTTolMax.Text.Replace(',', '.');
                        updateQuery = $"UPDATE aufträgepositionen SET {row} = '{textbox}' WHERE LaufendePositionsnummer = '{LaufendePositionsnummer}'";

                        try
                        {
                            using (MySqlConnection connection = new MySqlConnection(connectionString))
                            {
                                connection.Open();
                                MySqlCommand command = new MySqlCommand(updateQuery, connection);

                                command.ExecuteNonQuery();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error: " + ex.Message);
                        }

                        row = "1127D";
                        textbox = cmbOrderPositionEN1127D.SelectedIndex.ToString();
                        updateQuery = $"UPDATE aufträgepositionen SET {row} = '{textbox}' WHERE LaufendePositionsnummer = '{LaufendePositionsnummer}'";

                        try
                        {
                            using (MySqlConnection connection = new MySqlConnection(connectionString))
                            {
                                connection.Open();
                                MySqlCommand command = new MySqlCommand(updateQuery, connection);

                                command.ExecuteNonQuery();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error: " + ex.Message);
                        }

                        row = "1127T";
                        textbox = cmbOrderPositionEN1127T.SelectedIndex.ToString();
                        updateQuery = $"UPDATE aufträgepositionen SET {row} = '{textbox}' WHERE LaufendePositionsnummer = '{LaufendePositionsnummer}'";

                        try
                        {
                            using (MySqlConnection connection = new MySqlConnection(connectionString))
                            {
                                connection.Open();
                                MySqlCommand command = new MySqlCommand(updateQuery, connection);

                                command.ExecuteNonQuery();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error: " + ex.Message);
                        }

                        row = "Norm";
                        textbox = cmbOrderPositionNorm.SelectedIndex.ToString();
                        updateQuery = $"UPDATE aufträgepositionen SET {row} = '{textbox}' WHERE LaufendePositionsnummer = '{LaufendePositionsnummer}'";

                        try
                        {
                            using (MySqlConnection connection = new MySqlConnection(connectionString))
                            {
                                connection.Open();
                                MySqlCommand command = new MySqlCommand(updateQuery, connection);

                                command.ExecuteNonQuery();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error: " + ex.Message);
                        }

                        row = "Ausfuhrung";
                        textbox = cmbOrderPositionExec.SelectedIndex.ToString();
                        updateQuery = $"UPDATE aufträgepositionen SET {row} = '{textbox}' WHERE LaufendePositionsnummer = '{LaufendePositionsnummer}'";

                        try
                        {
                            using (MySqlConnection connection = new MySqlConnection(connectionString))
                            {
                                connection.Open();
                                MySqlCommand command = new MySqlCommand(updateQuery, connection);

                                command.ExecuteNonQuery();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error: " + ex.Message);
                        }

                        row = "WAZ";
                        textbox = cmbOrderPositionWAZ.SelectedIndex.ToString();
                        updateQuery = $"UPDATE aufträgepositionen SET {row} = '{textbox}' WHERE LaufendePositionsnummer = '{LaufendePositionsnummer}'";

                        try
                        {
                            using (MySqlConnection connection = new MySqlConnection(connectionString))
                            {
                                connection.Open();
                                MySqlCommand command = new MySqlCommand(updateQuery, connection);

                                command.ExecuteNonQuery();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error: " + ex.Message);
                        }

                        row = "KLMax";
                        textbox = txtOrderPositionKL.Text.Replace(',', '.');
                        updateQuery = $"UPDATE aufträgepositionen SET {row} = '{textbox}' WHERE LaufendePositionsnummer = '{LaufendePositionsnummer}'";

                        try
                        {
                            using (MySqlConnection connection = new MySqlConnection(connectionString))
                            {
                                connection.Open();
                                MySqlCommand command = new MySqlCommand(updateQuery, connection);

                                command.ExecuteNonQuery();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error: " + ex.Message);
                        }

                    }

                    else if (!String.IsNullOrEmpty(txtOrderOrderNumberSearch.Text) && listOrderCreationPositions.SelectedIndex == -1 && txtOrderOrderCreationPosition.Text == "")
                    {

                        string NeuePositionsnummer = "";

                        query = $"SELECT MIN(Auftragsposition + 1) AS missing_number FROM aufträgepositionen WHERE Auftragsposition + 1 NOT IN (SELECT Auftragsposition FROM aufträgepositionen) AND Auftragsposition > 0 AND Auftragsnummer = '{txtOrderOrderNumberSearch.Text}';";

                        Debug.WriteLine(query);

                        try
                        {
                            using (MySqlConnection connection = new MySqlConnection(connectionString))
                            {
                                connection.Open();

                                using (MySqlCommand command = new MySqlCommand(query, connection))
                                {

                                    using (MySqlDataReader reader = command.ExecuteReader())
                                    {
                                        while (reader.Read())
                                        {
                                            NeuePositionsnummer = reader.GetValue(0).ToString();
                                        }
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            Debug.WriteLine(ex.Message);
                        }

                        if (string.IsNullOrEmpty(NeuePositionsnummer))
                        {
                            NeuePositionsnummer = "1";
                        }

                        MessageBox.Show(NeuePositionsnummer);

                        string Brushing = "0";
                        string Stock = "0";
                        string FixDate = "0";
                        string Week = "0";

                        if (chkOrderPositionBrushing.Checked)
                        {
                            Brushing = "1";
                        }

                        if (chkOrderPositionStock.Checked)
                        {
                            Stock = "1";
                        }

                        if (chkOrderPositionFixDate.Checked)
                        {
                            FixDate = "1";
                        }

                        if (chkOrderPositionWeek.Checked)
                        {
                            Week = "1";
                        }

                        try
                        {
                            using (MySqlConnection connection = new MySqlConnection(connectionString))
                            {
                                connection.Open();

                                query = @"INSERT INTO `aufträgepositionen` 
                                (`Auftragsnummer`, `Auftragsposition`, `Artikelnummer`, `Solllänge`, `Längentoleranzmax`, `Längentoleranzmin`, `Bestellmenge`, `BestellmengeEinheit`, `MengentoleranzMin`, `MengentoleranzMax`, `MengentoleranzEinheit`, `Preis`, `PreisEinheit`, `Schleifen`, `Körnung`, `Bemerkungen`, `Lieferdatum`, `FixTermin`, `Kalenderwoche`, `AdTolMin`, `AdTolMax`, `WSTolMin`, `WSTolMax`, `1127D`, `1127T`, `Norm`, `Ausfuhrung`, `WAZ`, `KLMax`)
                                VALUES
                                (@Auftragsnummer, @Auftragsposition, @Artikelnummer, @Solllänge, @Längentoleranzmax, @Längentoleranzmin, @Bestellmenge, @BestellmengeEinheit, @MengentoleranzMin, @MengentoleranzMax, @MengentoleranzEinheit, @Preis, @PreisEinheit, @Schleifen, @Körnung, @Bemerkungen, @Lieferdatum, @FixTermin, @Kalenderwoche, @AdTolMin, @AdTolMax, @WSTolMin, @WSTolMax, @1127D, @1127T, @Norm, @Ausfuhrung, @WAZ, @KLMax);";


                                MySqlCommand command = new MySqlCommand(query, connection);

                                // Add parameters
                                command.Parameters.AddWithValue("@Auftragsnummer", txtOrderOrderNumberSearch.Text);
                                command.Parameters.AddWithValue("@Auftragsposition", NeuePositionsnummer);
                                command.Parameters.AddWithValue("@Artikelnummer", ArticleNumber);
                                command.Parameters.AddWithValue("@Solllänge", txtOrderPositionSetLength.Text.Replace(',', '.'));
                                command.Parameters.AddWithValue("@Längentoleranzmax", txtOrderPositionLengthToleranceMax.Text);
                                command.Parameters.AddWithValue("@Längentoleranzmin", txtOrderPositionLengthToleranceMin.Text);
                                command.Parameters.AddWithValue("@Bestellmenge", txtOrderPositionOrderQuantity.Text.Replace(',', '.'));
                                command.Parameters.AddWithValue("@BestellmengeEinheit", cmbOrderPositionOrderQuantityUnit.SelectedIndex.ToString());
                                command.Parameters.AddWithValue("@MengentoleranzMin", txtOrderPositionQuantityToleranceMin.Text);
                                command.Parameters.AddWithValue("@MengentoleranzMax", txtOrderPositionQuantityToleranceMax.Text);
                                command.Parameters.AddWithValue("@MengentoleranzEinheit", cmbOrderPositionQuantityToleranceUnit.SelectedIndex.ToString());
                                command.Parameters.AddWithValue("@Preis", txtOrderPositionPrice.Text.Replace(',', '.'));
                                command.Parameters.AddWithValue("@PreisEinheit", cmbOrderPositionPriceUnit.SelectedIndex.ToString());
                                command.Parameters.AddWithValue("@Schleifen", Brushing);
                                command.Parameters.AddWithValue("@Körnung", string.IsNullOrEmpty(txtOrderPositionBrushingQuality.Text) ? "0" : txtOrderPositionBrushingQuality.Text);
                                command.Parameters.AddWithValue("@Bemerkungen", txtOrderPositionAnnotation.Text);
                                command.Parameters.AddWithValue("@Lieferdatum", dateOrderPositionDeliveryterm.Value.ToString("yyyy-MM-dd"));
                                command.Parameters.AddWithValue("@FixTermin", FixDate);
                                command.Parameters.AddWithValue("@Kalenderwoche", Week);
                                command.Parameters.AddWithValue("@AdTolMin", txtOrderPositionODTolMin.Text.Replace(',', '.'));
                                command.Parameters.AddWithValue("@AdTolMax", txtOrderPositionODTolMax.Text.Replace(',', '.'));
                                command.Parameters.AddWithValue("@WSTolMin", txtOrderPositionWTTolMin.Text.Replace(',', '.'));
                                command.Parameters.AddWithValue("@WSTolMax", txtOrderPositionWTTolMax.Text.Replace(',', '.'));
                                command.Parameters.AddWithValue("@1127D", cmbOrderPositionEN1127D.SelectedIndex.ToString());
                                command.Parameters.AddWithValue("@1127T", cmbOrderPositionEN1127T.SelectedIndex.ToString());
                                command.Parameters.AddWithValue("@Norm", cmbOrderPositionNorm.SelectedIndex.ToString());
                                command.Parameters.AddWithValue("@Ausfuhrung", cmbOrderPositionExec.SelectedIndex.ToString());
                                command.Parameters.AddWithValue("@WAZ", cmbOrderPositionWAZ.SelectedIndex.ToString());
                                command.Parameters.AddWithValue("@KLMax", txtOrderPositionKL.Text);



                                // Execute the query
                                int rowsAffected = command.ExecuteNonQuery();

                                // Check if the insertion was successful
                                if (rowsAffected > 0)
                                {
                                    MessageBox.Show("Data inserted successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                }
                                else
                                {
                                    MessageBox.Show("Failed to insert data.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Error: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                }
            }
        }

        private void btnOrderCreationPositionsListReset_Click(object sender, EventArgs e)
        {
            boollistOrderPositionSelection = true;
            listOrderCreationPositions.SelectedIndex = -1;

            txtOrderPositionOD.Text = "";
            txtOrderPositionWT.Text = "";
            txtOrderPositionSetLength.Text = "";
            txtOrderPositionLengthToleranceMin.Text = "";
            txtOrderPositionLengthToleranceMax.Text = "";
            txtOrderPositionOrderQuantity.Text = "";
            txtOrderPositionQuantityToleranceMin.Text = "";
            txtOrderPositionQuantityToleranceMax.Text = "";
            txtOrderPositionPrice.Text = "";
            txtOrderPositionKL.Text = "";
            txtOrderPositionBrushingQuality.Text = "";
            dateOrderPositionDeliveryterm.ResetText();
            txtOrderPositionODTolMin.Text = "";
            txtOrderPositionODTolMax.Text = "";
            txtOrderPositionWTTolMin.Text = "";
            txtOrderPositionWTTolMax.Text = "";
            txtOrderPositionAnnotation.Text = "";

            cmbOrderPositionOrderQuantityUnit.ResetText();
            cmbOrderPositionQuantityToleranceUnit.ResetText();
            cmbOrderPositionPriceUnit.ResetText();
            cmbOrderPositionNorm.ResetText();
            cmbOrderPositionExec.ResetText();
            cmbOrderPositionWAZ.ResetText();
            cmbOrderPositionEN1127D.ResetText();
            cmbOrderPositionEN1127T.ResetText();

            chkOrderPositionBrushing.Checked = false;
            chkOrderPositionStock.Checked = false;
            chkOrderPositionFixDate.Checked = false;
            chkOrderPositionWeek.Checked = false;

            PopulateOrderCreationArticleSelectionList();
            OrderCreationPositionMaterialsRefresh();
        }


        private void txtOrderOrderCreationPosition_TextChanged(object sender, EventArgs e)
        {
            string LaufendePositionsnummer = "";

            string query = $"SELECT `LaufendePositionsnummer` FROM `prostahl`.`aufträgepositionen` WHERE `Auftragsnummer` LIKE '{txtOrderOrderNumberSearch.Text}' AND `Auftragsposition` LIKE '{txtOrderOrderCreationPosition.Text}' ORDER BY `LaufendePositionsnummer` ASC LIMIT 1";

            Debug.WriteLine(query);

            try
            {
                using (MySqlConnection connection = new MySqlConnection(connectionString))
                {
                    connection.Open();

                    using (MySqlCommand command = new MySqlCommand(query, connection))
                    {

                        using (MySqlDataReader reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                LaufendePositionsnummer = reader.GetValue(0).ToString();
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }

            if (!string.IsNullOrEmpty(LaufendePositionsnummer))
            {
                OrderOrderCreationPosition_TextChanged(LaufendePositionsnummer);
            }
            else
            {
                txtOrderPositionOD.Text = "";
                txtOrderPositionWT.Text = "";
                txtOrderPositionSetLength.Text = "";
                txtOrderPositionLengthToleranceMin.Text = "";
                txtOrderPositionLengthToleranceMax.Text = "";
                txtOrderPositionOrderQuantity.Text = "";
                txtOrderPositionQuantityToleranceMin.Text = "";
                txtOrderPositionQuantityToleranceMax.Text = "";
                txtOrderPositionPrice.Text = "";
                txtOrderPositionKL.Text = "";
                txtOrderPositionBrushingQuality.Text = "";
                dateOrderPositionDeliveryterm.ResetText();
                txtOrderPositionODTolMin.Text = "";
                txtOrderPositionODTolMax.Text = "";
                txtOrderPositionWTTolMin.Text = "";
                txtOrderPositionWTTolMax.Text = "";
                txtOrderPositionAnnotation.Text = "";

                cmbOrderPositionOrderQuantityUnit.ResetText();
                cmbOrderPositionQuantityToleranceUnit.ResetText();
                cmbOrderPositionPriceUnit.ResetText();
                cmbOrderPositionNorm.ResetText();
                cmbOrderPositionExec.ResetText();
                cmbOrderPositionWAZ.ResetText();
                cmbOrderPositionEN1127D.ResetText();
                cmbOrderPositionEN1127T.ResetText();

                chkOrderPositionBrushing.Checked = false;
                chkOrderPositionStock.Checked = false;
                chkOrderPositionFixDate.Checked = false;
                chkOrderPositionWeek.Checked = false;

                PopulateOrderCreationArticleSelectionList();
                OrderCreationPositionMaterialsRefresh();
            }
        }

        private void listOrderCreationPositions_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (boollistOrderPositionSelection == false && listOrderCreationPositions.SelectedItem != null && !string.IsNullOrWhiteSpace(listOrderCreationPositions.SelectedItem.ToString()))
            {
                string LaufendePositionsnummer = "";

                string query = $"SELECT `LaufendePositionsnummer` FROM `prostahl`.`aufträgepositionen` WHERE `Auftragsnummer` LIKE '{txtOrderOrderNumberSearch.Text}' AND `Auftragsposition` LIKE '{listOrderCreationPositions.SelectedItem.ToString()}' ORDER BY `LaufendePositionsnummer` ASC LIMIT 1";

                Debug.WriteLine(query);

                try
                {
                    using (MySqlConnection connection = new MySqlConnection(connectionString))
                    {
                        connection.Open();

                        using (MySqlCommand command = new MySqlCommand(query, connection))
                        {

                            using (MySqlDataReader reader = command.ExecuteReader())
                            {
                                while (reader.Read())
                                {
                                    LaufendePositionsnummer = reader.GetValue(0).ToString();
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine(ex.Message);
                }

                if (!string.IsNullOrEmpty(LaufendePositionsnummer))
                {
                    OrderOrderCreationPosition_TextChanged(LaufendePositionsnummer);
                }
                else
                {
                    txtOrderPositionOD.Text = "";
                    txtOrderPositionWT.Text = "";
                    txtOrderPositionSetLength.Text = "";
                    txtOrderPositionLengthToleranceMin.Text = "";
                    txtOrderPositionLengthToleranceMax.Text = "";
                    txtOrderPositionOrderQuantity.Text = "";
                    txtOrderPositionQuantityToleranceMin.Text = "";
                    txtOrderPositionQuantityToleranceMax.Text = "";
                    txtOrderPositionPrice.Text = "";
                    txtOrderPositionKL.Text = "";
                    txtOrderPositionBrushingQuality.Text = "";
                    dateOrderPositionDeliveryterm.ResetText();
                    txtOrderPositionODTolMin.Text = "";
                    txtOrderPositionODTolMax.Text = "";
                    txtOrderPositionWTTolMin.Text = "";
                    txtOrderPositionWTTolMax.Text = "";
                    txtOrderPositionAnnotation.Text = "";

                    cmbOrderPositionOrderQuantityUnit.ResetText();
                    cmbOrderPositionQuantityToleranceUnit.ResetText();
                    cmbOrderPositionPriceUnit.ResetText();
                    cmbOrderPositionNorm.ResetText();
                    cmbOrderPositionExec.ResetText();
                    cmbOrderPositionWAZ.ResetText();
                    cmbOrderPositionEN1127D.ResetText();
                    cmbOrderPositionEN1127T.ResetText();

                    chkOrderPositionBrushing.Checked = false;
                    chkOrderPositionStock.Checked = false;
                    chkOrderPositionFixDate.Checked = false;
                    chkOrderPositionWeek.Checked = false;

                    PopulateOrderCreationArticleSelectionList();
                    OrderCreationPositionMaterialsRefresh();
                }
            }
            boollistOrderPositionSelection = false;
        }

        private void OrderOrderCreationPosition_TextChanged(string LaufendePositionsnummer)
        {
            listOrderPositionArticle.Items.Clear();
            listOrderCreationPositionMaterials.Items.Clear();

            string Artikelnummer = GetFieldValue("Artikelnummer", LaufendePositionsnummer, "aufträgepositionen", "LaufendePositionsnummer");

            ListViewItem item = new ListViewItem(GetFieldValue("Außendurchmesser", LaufendePositionsnummer, "artikelrohre", "Artikelnummer"));
            item.SubItems.Add(GetFieldValue("Wandstärke", LaufendePositionsnummer, "artikelrohre", "Artikelnummer"));
            item.SubItems.Add(GetFieldValue("Werkstoff", LaufendePositionsnummer, "artikelrohre", "Artikelnummer"));
            boollistOrderPositionArticleProgSelection = true;
            listOrderPositionArticle.Items.Add(item);
            listOrderPositionArticle.Items[0].Selected = true;
            listOrderPositionArticle.Select(); // Bring focus to the ListView

            boollistOrderPositionArticleProgSelection = true;
            txtOrderPositionOD.Text = GetFieldValue("Außendurchmesser", Artikelnummer, "artikelrohre", "Artikelnummer");
            boollistOrderPositionArticleProgSelection = true;
            txtOrderPositionWT.Text = GetFieldValue("Wandstärke", Artikelnummer, "artikelrohre", "Artikelnummer");
            boollistOrderPositionArticleProgSelection = true;
            listOrderCreationPositionMaterials.Items.Add(GetFieldValue("Werkstoff", Artikelnummer, "artikelrohre", "Artikelnummer"));

            txtOrderPositionSetLength.Text = GetFieldValue("Solllänge", LaufendePositionsnummer, "aufträgepositionen", "LaufendePositionsnummer");
            txtOrderPositionLengthToleranceMin.Text = GetFieldValue("Längentoleranzmin", LaufendePositionsnummer, "aufträgepositionen", "LaufendePositionsnummer");
            txtOrderPositionLengthToleranceMax.Text = GetFieldValue("Längentoleranzmax", LaufendePositionsnummer, "aufträgepositionen", "LaufendePositionsnummer");
            txtOrderPositionOrderQuantity.Text = GetFieldValue("Bestellmenge", LaufendePositionsnummer, "aufträgepositionen", "LaufendePositionsnummer");
            cmbOrderPositionOrderQuantityUnit.SelectedIndex = int.Parse(GetFieldValue("BestellmengeEinheit", LaufendePositionsnummer, "aufträgepositionen", "LaufendePositionsnummer"));

            txtOrderPositionQuantityToleranceMin.Text = GetFieldValue("MengentoleranzMin", LaufendePositionsnummer, "aufträgepositionen", "LaufendePositionsnummer");
            txtOrderPositionQuantityToleranceMax.Text = GetFieldValue("MengentoleranzMax", LaufendePositionsnummer, "aufträgepositionen", "LaufendePositionsnummer");
            cmbOrderPositionQuantityToleranceUnit.SelectedIndex = int.Parse(GetFieldValue("MengentoleranzEinheit", LaufendePositionsnummer, "aufträgepositionen", "LaufendePositionsnummer"));
            txtOrderPositionPrice.Text = GetFieldValue("Preis", LaufendePositionsnummer, "aufträgepositionen", "LaufendePositionsnummer");
            cmbOrderPositionPriceUnit.SelectedIndex = int.Parse(GetFieldValue("PreisEinheit", LaufendePositionsnummer, "aufträgepositionen", "LaufendePositionsnummer"));

            chkOrderPositionBrushing.Checked = (GetFieldValue("Schleifen", LaufendePositionsnummer, "aufträgepositionen", "LaufendePositionsnummer") == "1");

            txtOrderPositionBrushingQuality.Text = GetFieldValue("Körnung", LaufendePositionsnummer, "aufträgepositionen", "LaufendePositionsnummer");
            txtOrderPositionAnnotation.Text = GetFieldValue("Bemerkungen", LaufendePositionsnummer, "aufträgepositionen", "LaufendePositionsnummer");

            chkOrderPositionFixDate.Checked = (GetFieldValue("FixTermin", LaufendePositionsnummer, "aufträgepositionen", "LaufendePositionsnummer") == "1");
            chkOrderPositionWeek.Checked = ((GetFieldValue("Kalenderwoche", LaufendePositionsnummer, "aufträgepositionen", "LaufendePositionsnummer")) == "1");
            dateOrderPositionDeliveryterm.Value = DateTime.Parse(GetFieldValue("Lieferdatum", LaufendePositionsnummer, "aufträgepositionen", "LaufendePositionsnummer"));

            cmbOrderPositionEN1127D.SelectedIndex = int.Parse(GetFieldValue("1127D", LaufendePositionsnummer, "aufträgepositionen", "LaufendePositionsnummer"));
            cmbOrderPositionEN1127T.SelectedIndex = int.Parse(GetFieldValue("1127T", LaufendePositionsnummer, "aufträgepositionen", "LaufendePositionsnummer"));

            txtOrderPositionODTolMin.Text = GetFieldValue("ADTolMin", LaufendePositionsnummer, "aufträgepositionen", "LaufendePositionsnummer");
            txtOrderPositionODTolMax.Text = GetFieldValue("ADTolMax", LaufendePositionsnummer, "aufträgepositionen", "LaufendePositionsnummer");
            txtOrderPositionWTTolMin.Text = GetFieldValue("WSTolMin", LaufendePositionsnummer, "aufträgepositionen", "LaufendePositionsnummer");
            txtOrderPositionWTTolMax.Text = GetFieldValue("WSTolMax", LaufendePositionsnummer, "aufträgepositionen", "LaufendePositionsnummer");

            cmbOrderPositionNorm.SelectedIndex = int.Parse(GetFieldValue("Norm", LaufendePositionsnummer, "aufträgepositionen", "LaufendePositionsnummer"));
            cmbOrderPositionExec.SelectedIndex = int.Parse(GetFieldValue("Ausfuhrung", LaufendePositionsnummer, "aufträgepositionen", "LaufendePositionsnummer"));
            cmbOrderPositionWAZ.SelectedIndex = int.Parse(GetFieldValue("WAZ", LaufendePositionsnummer, "aufträgepositionen", "LaufendePositionsnummer"));

            txtOrderPositionKL.Text = GetFieldValue("KLMax", LaufendePositionsnummer, "aufträgepositionen", "LaufendePositionsnummer");

        }

        private void cmbOrderPositionNorm_SelectedIndexChanged(object sender, EventArgs e)
        {
            //cmbOrderPositionExec

            //This should adapt the List of technical Specifications according to which the Tube will be made.

            cmbOrderPositionExec.Items.Clear();
            cmbOrderPositionExec.ResetText();
            //0 10217 TC1
            //1 10217 TC2
            //2 10296
            //3 SEW470
            //4 EN10357

            switch (cmbOrderPositionNorm.SelectedIndex)
            {
                case 0:
                    cmbOrderPositionExec.Items.Add("W0");
                    cmbOrderPositionExec.Items.Add("W1R");
                    cmbOrderPositionExec.Items.Add("W2R");
                    cmbOrderPositionExec.Items.Add("W0b");
                    cmbOrderPositionExec.Items.Add("W1Rb");
                    cmbOrderPositionExec.Items.Add("W2Rb");
                    cmbOrderPositionExec.Items.Add("W1R/W2R");
                    cmbOrderPositionExec.Items.Add("W1Rb/W2Rb");
                    cmbOrderPositionExec.Items.Add("W1");
                    cmbOrderPositionExec.Items.Add("W1b");
                    cmbOrderPositionExec.Items.Add("W1A");
                    cmbOrderPositionExec.Items.Add("W1Ab");
                    cmbOrderPositionExec.Items.Add("W2");
                    cmbOrderPositionExec.Items.Add("W2b");
                    cmbOrderPositionExec.Items.Add("W2A");
                    cmbOrderPositionExec.Items.Add("W2Ab");
                    cmbOrderPositionExec.Items.Add("WCA");
                    cmbOrderPositionExec.Items.Add("WG");
                    cmbOrderPositionExec.Items.Add("WP");
                    break;
                case 1:
                    cmbOrderPositionExec.Items.Add("W0");
                    cmbOrderPositionExec.Items.Add("W1R");
                    cmbOrderPositionExec.Items.Add("W2R");
                    cmbOrderPositionExec.Items.Add("W0b");
                    cmbOrderPositionExec.Items.Add("W1Rb");
                    cmbOrderPositionExec.Items.Add("W2Rb");
                    cmbOrderPositionExec.Items.Add("W1R/W2R");
                    cmbOrderPositionExec.Items.Add("W1Rb/W2Rb");
                    cmbOrderPositionExec.Items.Add("W1");
                    cmbOrderPositionExec.Items.Add("W1b");
                    cmbOrderPositionExec.Items.Add("W1A");
                    cmbOrderPositionExec.Items.Add("W1Ab");
                    cmbOrderPositionExec.Items.Add("W2");
                    cmbOrderPositionExec.Items.Add("W2b");
                    cmbOrderPositionExec.Items.Add("W2A");
                    cmbOrderPositionExec.Items.Add("W2Ab");
                    cmbOrderPositionExec.Items.Add("WCA");
                    cmbOrderPositionExec.Items.Add("WG");
                    cmbOrderPositionExec.Items.Add("WP");
                    break;
                case 2:
                    cmbOrderPositionExec.Items.Add("+AR");
                    cmbOrderPositionExec.Items.Add("+AT");
                    cmbOrderPositionExec.Items.Add("+AR + Glätten");
                    cmbOrderPositionExec.Items.Add("+AT + Glätten");
                    break;
                case 3:
                    cmbOrderPositionExec.Items.Add("-");
                    cmbOrderPositionExec.Items.Add("Glätten");
                    cmbOrderPositionExec.Items.Add("Glühen");
                    cmbOrderPositionExec.Items.Add("Glühen + Glätten");
                    break;
                case 4:
                    cmbOrderPositionExec.Items.Add("CL1 CM");
                    cmbOrderPositionExec.Items.Add("CL1 CD");
                    cmbOrderPositionExec.Items.Add("CL1 BC");
                    cmbOrderPositionExec.Items.Add("CL1 BD");
                    cmbOrderPositionExec.Items.Add("CL2 CM");
                    cmbOrderPositionExec.Items.Add("CL2 CD");
                    cmbOrderPositionExec.Items.Add("CL2 BC");
                    cmbOrderPositionExec.Items.Add("CL2 BD");
                    break;
            }
        }

        private void listOrderPositionArticle_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (listOrderPositionArticle.SelectedItems.Count > 0 && boollistOrderPositionArticleProgSelection == false)
            {
                txtOrderPositionOD.TextChanged -= txtOrderPositionOD_TextChanged;
                txtOrderPositionOD.Text = listOrderPositionArticle.SelectedItems[0].SubItems[0].Text;
                txtOrderPositionOD.TextChanged += txtOrderPositionOD_TextChanged;

                txtOrderPositionWT.TextChanged -= txtOrderPositionWT_TextChanged;
                txtOrderPositionWT.Text = listOrderPositionArticle.SelectedItems[0].SubItems[1].Text;
                txtOrderPositionWT.TextChanged += txtOrderPositionWT_TextChanged;
            }
            boollistOrderPositionArticleProgSelection = false;

            OrderOrderCreationPosition_CalculateTolerances();
        }


        private void cmbOrderPositionEN1127D_SelectedIndexChanged(object sender, EventArgs e)
        {
            OrderOrderCreationPosition_CalculateTolerances();
        }

        private void cmbOrderPositionEN1127T_SelectedIndexChanged(object sender, EventArgs e)
        {
            OrderOrderCreationPosition_CalculateTolerances();
        }

        private void OrderOrderCreationPosition_CalculateTolerances()
        {
            if (double.TryParse(txtOrderPositionOD.Text, out double AD) && int.TryParse(cmbOrderPositionEN1127D.SelectedIndex.ToString(), out int D))
            {
                // Initialize tolerance and minimum value
                double DTol = 0;
                double MinVal = 0;

                // Set tolerance and minimum values based on D input
                switch (D)
                {
                    case 0:
                        DTol = 1.5;   // 1.5%
                        MinVal = 0.75; // 0.75mm
                        break;
                    case 1:
                        DTol = 1.0;   // 1.0%
                        MinVal = 0.5;  // 0.5mm
                        break;
                    case 2:
                        DTol = 0.75;  // 0.75%
                        MinVal = 0.3;  // 0.3mm
                        break;
                    case 3:
                        DTol = 0.5;   // 0.5%
                        MinVal = 0.1;  // 0.1mm
                        break;
                }

                // Calculate DeltaVal using the tolerance percentage
                double DeltaVal = AD * DTol / 100.0;

                double CalcVal = DeltaVal;

                if (DeltaVal < MinVal)
                {
                    CalcVal = MinVal;
                }

                txtOrderPositionODTolMax.Text = (AD + CalcVal).ToString("0.00");
                txtOrderPositionODTolMin.Text = (AD - CalcVal).ToString("0.00");
            }


            if (double.TryParse(txtOrderPositionWT.Text, out double WS) && int.TryParse(cmbOrderPositionEN1127T.SelectedIndex.ToString(), out int T))
            {
                // Initialize tolerance and minimum value
                double TTol = 0;
                double MinVal = 0;

                // Set tolerance and minimum values based on D input
                switch (T)
                {
                    case 0:
                        TTol = 15;   // 1.5%
                        MinVal = 0.6; // 0.75mm
                        break;
                    case 1:
                        TTol = 12.5;   // 1.0%
                        MinVal = 0.4;  // 0.5mm
                        break;
                    case 2:
                        TTol = 10;  // 0.75%
                        MinVal = 0.2;  // 0.3mm
                        break;
                    case 3:
                        TTol = 7.5;   // 0.5%
                        MinVal = 0.15;  // 0.1mm
                        break;
                    case 4:
                        TTol = 5;   // 0.5%
                        MinVal = 0.1;  // 0.1mm
                        break;
                }

                double DeltaVal = WS * TTol / 100.0;

                double CalcVal = DeltaVal;

                if (DeltaVal < MinVal)
                {
                    CalcVal = MinVal;
                }

                txtOrderPositionWTTolMax.Text = (WS + CalcVal).ToString("0.00");
                txtOrderPositionWTTolMin.Text = (WS - CalcVal).ToString("0.00");
            }
        }

        

        private void textBox19_TextChanged(object sender, EventArgs e)
        {
            if (txtInquiryCustomer.Text != null)
            {
                listInquiryCustomer.Items.Clear();

                try
                {
                    using (MySqlConnection connection = new MySqlConnection(connectionString))
                    {
                        connection.Open();

                        string query = $"SELECT * FROM `prostahl`.`kunden` WHERE CONCAT_WS(' ', `Kürzel`, `Firmenname`, `Rechnung_Straße`, `Rechnung_Hausnummer`, `Rechnung_Stadt`, `Rechnung_PLZ`, `Rechnung_Land`, `Einkäufer_Name`, `Einkäufer_Telefonnummer`, `Einkäufer_EMail`, `Buchhaltung_Name`, `Buchhaltung_Telefonnummer`, `Buchhaltung_EMail`, `Werkszeugnis_EMail`, `Rechnung_EMail`) LIKE '%{txtInquiryCustomer.Text}%' ORDER BY `Firmenname` ASC LIMIT 1000;\r\n";
                        MySqlCommand command = new MySqlCommand(query, connection);

                        using (MySqlDataReader reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                // Read values from columns
                                string firmenname = reader.GetString(2); // Assuming `Firmenname` is at index 2

                                // Do something with the values...
                                listInquiryCustomer.Items.Add(firmenname);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Error: " + ex.Message);
                }
            }
        }

        private void textBox20_TextChanged(object sender, EventArgs e)
        {
            if (txtInquiryDeliveryAdress.Text != null)
            {
                listInquiryDeliveryAdresses.Items.Clear();

                try
                {
                    using (MySqlConnection connection = new MySqlConnection(connectionString))
                    {
                        connection.Open();

                        string query = $"SELECT * FROM `prostahl`.`lieferanschrift` WHERE CONCAT_WS(' ', `Firmenname`, `Straße`, `Hausnummer`, `PLZ`, `Stadt`, `Land`, `Ansprechpartner`, `Ansprechpartner_Telefon`, `Ansprechpartner_Mail`) LIKE '%{txtInquiryDeliveryAdress.Text}%' ORDER BY `Firmenname` ASC LIMIT 1000;\r\n";
                        MySqlCommand command = new MySqlCommand(query, connection);

                        using (MySqlDataReader reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                // Read values from columns
                                string readout = reader.GetString(1); // Assuming the searched value is at index 1

                                // Do something with the values...
                                listInquiryDeliveryAdresses.Items.Add(readout);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Error: " + ex.Message);
                }
            }
        }

        private void checkBox2_CheckedChanged(object sender, EventArgs e)
        {
            if (chkInquiryPickup.Checked == false)
            {
                label70.Visible = true;
                txtInquiryDeliveryAdress.Visible = true;
                listInquiryDeliveryAdresses.Visible = true;
                txtInquiryDeliveryContact.Visible = true;
                txtInquiryDeliveryCity.Visible = true;
                txtInquiryDeliveryPostcode.Visible = true;
                txtInquiryDeliveryNumber.Visible = true;
                txtInquiryDeliveryStreet.Visible = true;
                label33.Visible = true;
                label62.Visible = true;
                label61.Visible = true;
                label60.Visible = true;
                label59.Visible = true;
            }
            else
            {
                label70.Visible = false;
                txtInquiryDeliveryAdress.Visible = false;
                listInquiryDeliveryAdresses.Visible = false;
                txtInquiryDeliveryContact.Visible = false;
                txtInquiryDeliveryCity.Visible = false;
                txtInquiryDeliveryPostcode.Visible = false;
                txtInquiryDeliveryNumber.Visible = false;
                txtInquiryDeliveryStreet.Visible = false;
                label33.Visible = false;
                label62.Visible = false;
                label61.Visible = false;
                label60.Visible = false;
                label59.Visible = false;
            }
        }

        //Inquiries

        private void btnInquirySave_Click(object sender, EventArgs e)
        {
            if (listInquiryCustomer.SelectedItem != null && listInquiryDeliveryAdresses.SelectedItem != null)
            {
                string AbWerk;
                int AbWerkWert;
                if (chkInquiryPickup.Checked) { AbWerk = "Ja"; AbWerkWert = 1; } else { AbWerk = "Nein"; AbWerkWert = 0; }
                string Englisch;
                int EnglischWert;
                if (chkInquiryEnglisch.Checked) { Englisch = "Ja"; EnglischWert = 1; } else { Englisch = "Nein"; EnglischWert = 0; }

                DialogResult result = MessageBox.Show(
                $"Ab Werk?: {AbWerk}{Environment.NewLine}" +
                $"Kunde: {GetFieldValue("Firmenname", listInquiryCustomer.SelectedItem.ToString(), "kunden", "Firmenname")} {Environment.NewLine}" +
                $"Lieferanschrift: {GetFieldValue("Firmenname", listInquiryDeliveryAdresses.SelectedItem.ToString(), "lieferanschrift", "Firmenname")}{Environment.NewLine}" +
                $"Englisch?: {Englisch}{Environment.NewLine}" +
                $"Bemerkungen: {txtInquiryText.Text}{Environment.NewLine}",
                "Confirm Details", // Title of the message box
                MessageBoxButtons.YesNo); // Buttons for the message box

                // Check the Length of the MessageBox
                if (result == DialogResult.Yes)
                {

                    // SQL query
                    string query = @"INSERT INTO anfragen 
                                (Kundennummer, Lieferanschrift, `AbWerk`, `Englisch`, `Bemerkungen`) 
                                VALUES 
                                (@Kundennummer, @Lieferanschrift, @AbWerk, @Englisch, @Bemerkungen)";

                    // Create MySqlConnection object
                    using (MySqlConnection connection = new MySqlConnection(connectionString))
                    {
                        // Open the connection
                        connection.Open();

                        // Create MySqlCommand object
                        using (MySqlCommand command = new MySqlCommand(query, connection))
                        {
                            // Add parameters
                            command.Parameters.AddWithValue("@Kundennummer", GetFieldValue("Kundennummer", listInquiryCustomer.SelectedItem.ToString(), "kunden", "Firmenname"));
                            command.Parameters.AddWithValue("@Lieferanschrift", GetFieldValue("Lieferanschrift_Nummer", listInquiryDeliveryAdresses.SelectedItem.ToString(), "lieferanschrift", "Firmenname"));
                            command.Parameters.AddWithValue("@AbWerk", AbWerkWert);
                            command.Parameters.AddWithValue("@Englisch", EnglischWert);
                            command.Parameters.AddWithValue("@Bemerkungen", txtInquiryText.Text);

                            // Execute the query
                            command.ExecuteNonQuery();
                        }
                    }

                    using (MySqlConnection conn = new MySqlConnection(connectionString))
                    {
                        conn.Open();

                        query = "SELECT Anfragenummer FROM anfragen ORDER BY Anfragenummer DESC LIMIT 1";

                        using (MySqlCommand cmd = new MySqlCommand(query, conn))
                        {
                            object inquiryno = cmd.ExecuteScalar();

                            // Check for null in case the table is empty
                            if (inquiryno != DBNull.Value)
                            {
                                txtInquiryNumber.Text = (Convert.ToInt32(inquiryno)).ToString();
                            }
                        }
                    }
                }
            }
        }

        private void btnInquiryPositionSave_Click(object sender, EventArgs e)
        {
            try
            {
                // Ensure at least one item is selected
                if (listInquiryPositionArticle.SelectedItems.Count > 0)
                {
                    // Access the first selected item

                    // Display the selected item's information in a message box
                    ListViewItem selectedItem = listInquiryPositionArticle.SelectedItems[0];
                    ArticleNumber = "";
                    string AD = selectedItem.SubItems[0].Text.Replace(',', '.');
                    string WS = selectedItem.SubItems[1].Text.Replace(',', '.');
                    string Werkstoff = selectedItem.SubItems[2].Text.Replace(',', '.');

                    string query = $"SELECT Artikelnummer FROM `prostahl`.`artikelrohre` WHERE 1=1 AND `Außendurchmesser` = {AD} AND `Werkstoff` = '{Werkstoff}' AND `Wandstärke` = {WS} ORDER BY `Werkstoff` ASC LIMIT 1000\r\n";

                    Debug.WriteLine(query);

                    try
                    {
                        using (MySqlConnection connection = new MySqlConnection(connectionString))
                        {
                            connection.Open();

                            using (MySqlCommand command = new MySqlCommand(query, connection))
                            {

                                using (MySqlDataReader reader = command.ExecuteReader())
                                {
                                    while (reader.Read())
                                    {
                                        ArticleNumber = reader.GetValue(0).ToString();
                                    }
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine(ex.Message);
                    }
                }
            }
            catch (ArgumentOutOfRangeException ex)
            {
                // Log the exception or show a message to the user
                MessageBox.Show("An error occurred while selecting an item: " + ex.Message);
            }

            string Glühen;
            string Glätten;
            string Vorrat;
            string Bürsten;
            string GlühenText;
            string GlättenText;
            string VorratText;
            string BürstenText;

            //Following will put Glühen to yes if it has been selected accordingly. 
            if (cmInquiryPositionDIN.SelectedIndex < 2 && (cmInquiryPositionDinExec.SelectedIndex == 1 || cmInquiryPositionDinExec.SelectedIndex == 2 || cmInquiryPositionDinExec.SelectedIndex == 4 || cmInquiryPositionDinExec.SelectedIndex == 5 || cmInquiryPositionDinExec.SelectedIndex == 6 || cmInquiryPositionDinExec.SelectedIndex == 7))
            {
                Glühen = "1";
                GlühenText = "Ja";
            }
            else if (cmInquiryPositionDIN.SelectedIndex == 2 && (cmInquiryPositionDinExec.SelectedIndex == 1 || cmInquiryPositionDinExec.SelectedIndex == 3))
            {
                Glühen = "1";
                GlühenText = "Ja";
            }
            else if (cmInquiryPositionDIN.SelectedIndex == 3 && (cmInquiryPositionDinExec.SelectedIndex > 1))
            {
                Glühen = "1";
                GlühenText = "Ja";
            }
            else if (cmInquiryPositionDIN.SelectedIndex == 4 && (cmInquiryPositionDinExec.SelectedIndex == 2 || cmInquiryPositionDinExec.SelectedIndex == 3 || cmInquiryPositionDinExec.SelectedIndex == 6 || cmInquiryPositionDinExec.SelectedIndex == 7))
            {
                Glühen = "1";
                GlühenText = "Ja";
            }
            else
            {
                Glühen = "0";
                GlühenText = "Nein";
            }

            if (cmInquiryPositionDIN.SelectedIndex < 2 && (cmInquiryPositionDinExec.SelectedIndex == 3 || cmInquiryPositionDinExec.SelectedIndex == 4 || cmInquiryPositionDinExec.SelectedIndex == 5 || cmInquiryPositionDinExec.SelectedIndex == 7 || cmInquiryPositionDinExec.SelectedIndex == 9 || cmInquiryPositionDinExec.SelectedIndex == 11 || cmInquiryPositionDinExec.SelectedIndex == 13 || cmInquiryPositionDinExec.SelectedIndex == 15))
            {
                Glätten = "1";
                GlättenText = "Ja";
            }
            else if (cmInquiryPositionDIN.SelectedIndex == 2 && cmInquiryPositionDinExec.SelectedIndex > 1)
            {
                Glätten = "1";
                GlättenText = "Ja";

            }
            else if (cmInquiryPositionDIN.SelectedIndex == 3 && (cmInquiryPositionDinExec.SelectedIndex == 1 || cmInquiryPositionDinExec.SelectedIndex == 3))
            {
                Glätten = "1";
                GlättenText = "Ja";

            }
            else if (cmInquiryPositionDIN.SelectedIndex == 4)
            {
                Glätten = "1";
                GlättenText = "Ja";

            }
            else
            {
                Glätten = "0";
                GlättenText = "Nein";

            }

            if (chkInquiryPositionfromStock.Checked) { Vorrat = "1"; VorratText = "Ja"; } else { Vorrat = "0"; VorratText = "Nein"; };
            if (chkInquiryPositionBrushing.Checked) { Bürsten = "1"; BürstenText = "Ja"; } else { Bürsten = "0"; BürstenText = "Nein"; };

            string price = txtInquiryPositionPrice.Text.Replace(',', '.');

            if (listInquiryPositionArticle.SelectedItems.ToString() == null || cmbInquiryPositionQuantityUnit.SelectedItem.ToString() == null || cmbInquiryPositionQuantityTolUnit.SelectedItem.ToString() == null || cmInquiryPositionD.SelectedItem.ToString() == null || cmInquiryPositionT.SelectedItem.ToString() == null || cmInquiryPositionDIN.SelectedItem.ToString() == null || cmInquiryPositionDinExec.SelectedItem.ToString() == null || cmInquiryPositionCert.SelectedItem.ToString() == null)
            {
                MessageBox.Show("One or More ComboBoxes not Setup Correctly!");
                return;
            };


            DialogResult result = MessageBox.Show(
                $"Außendurchmesser: {txtInquiryPositionOD.Text}{Environment.NewLine}" +
                $"Wandstärke: {txtInquiryPositionWT.Text}{Environment.NewLine}" +
                $"Werkstoff: {listInquiryPositionArticle.SelectedItems[0].SubItems[2].Text ?? ""}{Environment.NewLine}" +
                $"Artikelnummer: {ArticleNumber}{Environment.NewLine}" +
                $"Soll Länge: {txtInquiryPositionLength.Text ?? ""}{Environment.NewLine}" +
                $"Längentoleranz: -{txtInquiryPositionMinLength.Text ?? ""}/+{txtInquiryPositionMaxLength.Text ?? ""}{Environment.NewLine}" +
                $"Bestellmenge: {txtInquiryPositionQuantity.Text ?? ""} {cmbInquiryPositionQuantityUnit.SelectedItem.ToString()}{Environment.NewLine}" +
                $"Mengentoleranz: {txtInquiryPositionMinQuantity.Text ?? ""}-{txtInquiryPositionMaxQuantity.Text ?? ""} {cmbInquiryPositionQuantityTolUnit.SelectedItem.ToString()} {Environment.NewLine}" +
                $"Preis Einheit: {cmbInquiryPositionPriceUnit.SelectedItem.ToString()}{Environment.NewLine}" +
                $"Preis: {price}{Environment.NewLine}" +
                $"Liefertermin: {txtInquiryPositionDeliveryTime.Text}{Environment.NewLine}" +
                $"KL Max. %: {txtInquiryPositionKLMax.Text}{Environment.NewLine}" +
                $"D?: {cmInquiryPositionD.SelectedItem.ToString() ?? ""}{Environment.NewLine}" +
                $"T?: {cmInquiryPositionT.SelectedItem.ToString() ?? ""}{Environment.NewLine}" +
                $"Norm: {cmInquiryPositionDIN.SelectedItem.ToString()}{Environment.NewLine}" +
                $"Ausführung: {cmInquiryPositionDinExec.SelectedItem.ToString()}{Environment.NewLine}" +
                $"Glühen: {GlühenText}{Environment.NewLine}" +
                $"Glätten?: {GlättenText}{Environment.NewLine}" +
                $"Zeugnis: {cmInquiryPositionCert.SelectedItem.ToString()}{Environment.NewLine}" +
                $"Vorrat?: {VorratText}{Environment.NewLine}" +
                $"Bürsten: {BürstenText} {Environment.NewLine}" +
                $"Körnung: {txtInquiryPositionBrushingQuality.Text ?? ""}{Environment.NewLine}" +
                $"Anmerkungen: {txtInquiryPosText.Text ?? ""}{Environment.NewLine}",
                "Confirm Details", // Title of the message box
                MessageBoxButtons.YesNo // Buttons for the message box
                );

            // Check the Length of the MessageBox
            if (result == DialogResult.Yes)
            {
                try
                {
                    using (MySqlConnection connection = new MySqlConnection(connectionString))
                    {
                        connection.Open();

                        string query;

                        query = @"INSERT INTO `anfragenposition` 
                                (`Auftragsnummer`, `Positionsnummer`, `Artikelnummer`, `Lange`, `Langentoleranzmin`, `Langentoleranzmax`, `Menge`, `MengeEinheit`, `Mengentoleranzmin`, `Mengentoleranzmax`, `MengentoleranzEinheit`, `1127D`, `1127T`, `Norm`, `Ausfuhrung`, `WAZ`, `Bemerkung`, `Liefertermin`, `Preis`, `PreisEinheit`, `Gluhen`, `Glatten`, `Vorrat`, `Bursten`, `Kornung`, `KLMax`)
                                VALUES
                                (@Auftragsnummer, @Positionsnummer, @Artikelnummer, @Lange, @Langentoleranzmin, @Langentoleranzmax, @Menge, @MengeEinheit, @Mengentoleranzmin, @Mengentoleranzmax, @MengentoleranzEinheit, @1127D, @1127T, @Norm, @Ausfuhrung, @WAZ, @Bemerkung, @Liefertermin, @Preis, @PreisEinheit, @Gluhen, @Glatten, @Vorrat, @Bursten, @Kornung, @KlMax);";

                        MySqlCommand command = new MySqlCommand(query, connection);

                        // Add parameters
                        command.Parameters.AddWithValue("@Auftragsnummer", txtInquiryNumber.Text);
                        command.Parameters.AddWithValue("@Positionsnummer", txtInquiryPosition.Text);
                        command.Parameters.AddWithValue("@Artikelnummer", ArticleNumber);
                        command.Parameters.AddWithValue("@Lange", txtInquiryPositionLength.Text);
                        command.Parameters.AddWithValue("@Langentoleranzmin", txtInquiryPositionMinLength.Text);
                        command.Parameters.AddWithValue("@Langentoleranzmax", txtInquiryPositionMaxLength.Text);
                        command.Parameters.AddWithValue("@Menge", txtInquiryPositionQuantity.Text);
                        command.Parameters.AddWithValue("@KlMax", txtInquiryPositionKLMax.Text);
                        command.Parameters.AddWithValue("@MengeEinheit", cmbInquiryPositionQuantityUnit.SelectedIndex);
                        command.Parameters.AddWithValue("@Mengentoleranzmin", txtInquiryPositionMinQuantity.Text);
                        command.Parameters.AddWithValue("@Mengentoleranzmax", txtInquiryPositionMaxQuantity.Text);
                        command.Parameters.AddWithValue("@MengentoleranzEinheit", cmbInquiryPositionQuantityTolUnit.SelectedIndex);
                        command.Parameters.AddWithValue("@1127D", cmInquiryPositionD.SelectedItem.ToString());
                        command.Parameters.AddWithValue("@1127T", cmInquiryPositionT.SelectedItem.ToString());
                        command.Parameters.AddWithValue("@Norm", cmInquiryPositionDIN.SelectedItem.ToString());
                        command.Parameters.AddWithValue("@Ausfuhrung", cmInquiryPositionDinExec.SelectedItem.ToString());
                        command.Parameters.AddWithValue("@WAZ", cmInquiryPositionCert.SelectedItem.ToString());
                        command.Parameters.AddWithValue("@Bemerkung", txtInquiryPosText.Text ?? "");
                        command.Parameters.AddWithValue("@Liefertermin", txtInquiryPositionDeliveryTime.Text);
                        command.Parameters.AddWithValue("@Preis", price);
                        command.Parameters.AddWithValue("@PreisEinheit", cmbInquiryPositionPriceUnit.SelectedIndex);
                        command.Parameters.AddWithValue("@Gluhen", Glühen);
                        command.Parameters.AddWithValue("@Glatten", Glätten);
                        command.Parameters.AddWithValue("@Vorrat", Vorrat);
                        command.Parameters.AddWithValue("@Bursten", Bürsten);
                        command.Parameters.AddWithValue("@Kornung", string.IsNullOrEmpty(txtInquiryPositionBrushingQuality.Text) ? (object)DBNull.Value : txtInquiryPositionBrushingQuality.Text);

                        // Execute the query
                        int rowsAffected = command.ExecuteNonQuery();

                        // Check if the insertion was successful
                        if (rowsAffected > 0)
                        {
                            MessageBox.Show("Data inserted successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                        else
                        {
                            MessageBox.Show("Failed to insert data.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Error: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }

            //txtInquiryPositionLength.Text
            //txtInquiryPositionMinLength
            //txtInquiryPositionMaxLength
            //txtInquiryPositionMeter
            //txtInquiryPositionPieces
            //txtInquiryPositionMinTol
            //txtInquiryPositionMaxTol
            //cmInquiryPositionD.SelectedItem.ToString();
            //cmInquiryPositionT.SelectedItem.ToString();
            //cmInquiryPositionDIN.SelectedItem.ToString();
            //cmInquiryPositionDinExec.SelectedItem.ToString();
            //chkInquiryPositionR.Checked;
            //chkInquiryPositionB.Checked;
            //cmInquiryPositionCert.SelectedItem.ToString();
            //txtInquiryPositionDeliveryTime
            //txtInquiryPositionPricePerPiece
            //txtInquiryPositionPricePerMeter
            //txtInquiryPosText.Text;
            //txtInquiryPositionMinTolMeter.Text
            //txtInquiryPositionMaxTolMeter.Text
            //txtInquiryPositionLength.Text
            //txtInquiryPositionMinLength
            //txtInquiryPositionMaxLength
            //txtInquiryPositionMeter
            //txtInquiryPositionPieces
            //txtInquiryPositionMinTol
            //txtInquiryPositionMaxTol
            //cmInquiryPositionD.SelectedItem.ToString();
            //cmInquiryPositionT.SelectedItem.ToString();
            //cmInquiryPositionDIN.SelectedItem.ToString();
            //cmInquiryPositionDinExec.SelectedItem.ToString();
            //chkInquiryPositionR.Checked;
            //chkInquiryPositionB.Checked;
            //cmInquiryPositionCert.SelectedItem.ToString();
            //chkInquiryPositionTolPcs.Checked;
            //txtInquiryPositionPricePerPiece
            //txtInquiryPositionPricePerMeter
            //txtInquiryPosText.Text;

        }

        private void btnInquirySurchargeAdd_Click(object sender, EventArgs e)
        {
            if (!String.IsNullOrEmpty(txtInquiryNumber.Text) && !String.IsNullOrEmpty(txtInquirySurchargeCost.Text) && !String.IsNullOrEmpty(txtInquirySurchargeDesc.Text) && cmbInquirySurchargeType.SelectedItem != "")
            {

                bool isValid = decimal.TryParse(txtInquirySurchargeCost.Text, out decimal surchargeCost);

                if (isValid)
                {
                    // Retrieve the values from the text fields and combo box
                    string orderNumber = txtInquiryNumber.Text;
                    string surchargeDesc = txtInquirySurchargeDesc.Text;
                    string surchargeType = cmbInquirySurchargeType.SelectedItem.ToString();

                    // Define the SQL query
                    string query = "INSERT INTO anfragenzuschläge (Auftragsnummer, Menge, Beschreibung, Zuschlagsart) VALUES (@OrderNumber, @SurchargeCost, @SurchargeDesc, @SurchargeType)";

                    // Create a connection to the database
                    using (MySqlConnection connection = new MySqlConnection(connectionString))
                    {
                        try
                        {
                            // Open the connection
                            connection.Open();

                            // Create a MySqlCommand object
                            using (MySqlCommand command = new MySqlCommand(query, connection))
                            {
                                // Define the parameters and their values
                                command.Parameters.AddWithValue("@OrderNumber", orderNumber);
                                command.Parameters.AddWithValue("@SurchargeCost", surchargeCost);
                                command.Parameters.AddWithValue("@SurchargeDesc", surchargeDesc);
                                command.Parameters.AddWithValue("@SurchargeType", surchargeType);

                                // Execute the query
                                command.ExecuteNonQuery();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show($"Error: {ex.Message}");
                        }
                    }
                }
            }


            //Following will populate the ListSurcharge

            // Clear the existing items and columns
            ListInquirySurcharge.Items.Clear();
            ListInquirySurcharge.Columns.Clear();

            // Add columns to the ListView
            ListInquirySurcharge.Columns.Add("Zuschlagsart", 100);
            ListInquirySurcharge.Columns.Add("Beschreibung", 100);
            ListInquirySurcharge.Columns.Add("Menge", 100);

            // Fetch rows from the database
            List<string[]> rows = InquiryGetRows(txtInquiryNumber.Text);

            // Add each row to the ListView
            foreach (var row in rows)
            {
                ListInquirySurcharge.Items.Add(new ListViewItem(row));
            }

        }

        private List<string[]> InquiryGetRows(string Anfragennummer)
        {
            var results = new List<string[]>();

            using (MySqlConnection conn = new MySqlConnection(connectionString))
            {
                conn.Open();
                string query = "SELECT Zuschlagsart, Beschreibung, Menge FROM anfragenzuschläge WHERE Anfragennummer = @Anfragennummer";

                using (MySqlCommand cmd = new MySqlCommand(query, conn))
                {
                    cmd.Parameters.AddWithValue("@Anfragennummer", Anfragennummer);

                    using (MySqlDataReader reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            string zuschlagsart = reader["Zuschlagsart"].ToString();
                            string beschreibung = reader["Beschreibung"].ToString();
                            string menge = reader["Menge"].ToString();
                            results.Add(new string[] { zuschlagsart, beschreibung, menge });
                        }
                    }
                }
            }

            return results;
        }

        private void txtInquiryNumber_TextChanged(object sender, EventArgs e)
        {
            DeleteInquiryPositionDetails();

            if (!String.IsNullOrEmpty(GetFieldValue("Kundennummer", txtInquiryNumber.Text, "anfragen", "Anfragenummer")))
            {
                string Anfragennummer = txtInquiryNumber.Text;
                txtInquiryText.Text = GetFieldValue("Bemerkungen", Anfragennummer, "anfragen", "Anfragenummer");
                if (GetFieldValue("Englisch", Anfragennummer, "anfragen", "Anfragenummer") == "1") { chkInquiryEnglisch.Checked = true; } else { chkInquiryEnglisch.Checked = false; };


                //This will do the Customer Order Information: 
                string Kundennummer = GetFieldValue("Kundennummer", Anfragennummer, "anfragen", "Anfragenummer");
                txtInquiryCustomerContact.Text = GetFieldValue("Einkäufer_Name", Kundennummer, "kunden", "Kundennummer");
                txtInquiryCustomerStreet.Text = GetFieldValue("Rechnung_Straße", Kundennummer, "kunden", "Kundennummer");
                txtInquiryCustomerStreetNumber.Text = GetFieldValue("Rechnung_Hausnummer", Kundennummer, "kunden", "Kundennummer");
                txtInquiryCustomerPostcode.Text = GetFieldValue("Rechnung_PLZ", Kundennummer, "kunden", "Kundennummer");
                txtInquiryCustomerCity.Text = GetFieldValue("Rechnung_Stadt", Kundennummer, "kunden", "Kundennummer");
                listInquiryCustomer.Items.Clear();
                listInquiryCustomer.Items.Add(GetFieldValue("Firmenname", Kundennummer, "kunden", "Kundennummer"));


                if (GetFieldValue("AbWerk", Anfragennummer, "anfragen", "Anfragenummer") == "1")
                {
                    chkInquiryPickup.Checked = true;
                }
                else
                {
                    chkInquiryPickup.Checked = false;
                    //This will do Delivery Adress Information:
                    string Lieferanschriftnummer = GetFieldValue("Lieferanschrift", Anfragennummer, "anfragen", "Anfragenummer");
                    txtInquiryDeliveryContact.Text = GetFieldValue("Ansprechpartner", Lieferanschriftnummer, "lieferanschrift", "Lieferanschrift_Nummer");
                    txtInquiryDeliveryStreet.Text = GetFieldValue("Straße", Lieferanschriftnummer, "lieferanschrift", "Lieferanschrift_Nummer");
                    txtInquiryDeliveryNumber.Text = GetFieldValue("Hausnummer", Lieferanschriftnummer, "lieferanschrift", "Lieferanschrift_Nummer");
                    txtInquiryDeliveryPostcode.Text = GetFieldValue("PLZ", Lieferanschriftnummer, "lieferanschrift", "Lieferanschrift_Nummer");
                    txtInquiryDeliveryCity.Text = GetFieldValue("Stadt", Lieferanschriftnummer, "lieferanschrift", "Lieferanschrift_Nummer");
                    listInquiryDeliveryAdresses.Items.Clear();
                    listInquiryDeliveryAdresses.Items.Add(GetFieldValue("Firmenname", Lieferanschriftnummer, "lieferanschrift", "Lieferanschrift_Nummer"));
                };


                //Following will populate the ListSurcharge

                // Clear the existing items and columns
                ListInquirySurcharge.Items.Clear();
                ListInquirySurcharge.Columns.Clear();

                // Add columns to the ListView
                ListInquirySurcharge.Columns.Add("Zuschlagsart", 100);
                ListInquirySurcharge.Columns.Add("Beschreibung", 100);
                ListInquirySurcharge.Columns.Add("Menge", 100);

                // Fetch rows from the database
                List<string[]> rows = InquiryGetRows(txtInquiryNumber.Text);

                // Add each row to the ListView
                foreach (var row in rows)
                {
                    ListInquirySurcharge.Items.Add(new ListViewItem(row));
                }



                //Following should populate the List of Positions:

                string query = $"SELECT* FROM `prostahl`.`anfragenposition` WHERE Auftragsnummer = {txtInquiryNumber.Text} ORDER BY `Auftragsnummer` ASC LIMIT 1000;";


                //This Code block is for the Listbox for Material Selection
                listInquiryPositions.Items.Clear();

                try
                {
                    using (MySqlConnection connection = new MySqlConnection(connectionString))
                    {
                        connection.Open();

                        Debug.WriteLine(query);
                        MySqlCommand command = new MySqlCommand(query, connection);


                        using (MySqlDataReader reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                // Read values from columns
                                string readout = reader.GetInt16(2).ToString(); // Assuming the searched value is at index 1

                                // Do something with the values...
                                listInquiryPositions.Items.Add(readout);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine(ex.Message);
                }
            }
            else
            {
                txtInquiryCustomer.Text = "";
                txtInquiryDeliveryAdress.Text = "";
                chkInquiryEnglisch.Checked = false;
                txtInquiryText.Text = "";
                txtInquiryCustomerContact.Text = "";
                txtInquiryCustomerStreet.Text = "";
                txtInquiryCustomerStreetNumber.Text = "";
                txtInquiryCustomerPostcode.Text = "";
                txtInquiryCustomerCity.Text = "";
                listInquiryCustomer.Items.Clear();
                txtInquiryDeliveryContact.Text = "";
                txtInquiryDeliveryStreet.Text = "";
                txtInquiryDeliveryNumber.Text = "";
                txtInquiryDeliveryPostcode.Text = "";
                txtInquiryDeliveryCity.Text = "";
                listInquiryDeliveryAdresses.Items.Clear();
                ListInquirySurcharge.Items.Clear();
                chkInquiryPickup.Checked = false;
                listInquiryPositions.SelectedItems.Clear();
                listInquiryPositionsMaterials.SelectedItems.Clear();
            }
        }

        private void btnInquirySurchargeDelete_Click(object sender, EventArgs e)
        {
            // Ensure at least one item is selected
            if (ListInquirySurcharge.SelectedItems.Count == 0)
            {
                MessageBox.Show("Please select an item to delete.", "No Selection", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }


            // Assuming the first column is the primary key or unique identifier
            string selectedItemSurchargeType = ListInquirySurcharge.SelectedItems[0].SubItems[0].Text;
            string selectedItemDescription = ListInquirySurcharge.SelectedItems[0].SubItems[1].Text;
            string selectedItemAmount = ListInquirySurcharge.SelectedItems[0].SubItems[2].Text;
            string Anfragennummer = txtInquiryNumber.Text;

            // Display a confirmation message box
            DialogResult result = MessageBox.Show(
                $"Do you really want to delete the following item?{Environment.NewLine}" +
                $"Zuschlagsart: {selectedItemSurchargeType}{Environment.NewLine}" +
                $"Beschreibung: {selectedItemDescription}{Environment.NewLine}" +
                $"Menge: {selectedItemAmount}{Environment.NewLine}",
                "Confirm Delete",
                MessageBoxButtons.YesNo,
                MessageBoxIcon.Question);

            //// Check the Length of the MessageBox
            if (result == DialogResult.Yes)
            {
                try
                {
                    using (MySqlConnection conn = new MySqlConnection(connectionString))
                    {
                        conn.Open();

                        string query = "DELETE FROM anfragenzuschläge WHERE Auftragsnummer = @InquiryNumber AND Zuschlagsart = @surchargeType AND Beschreibung = @description AND Menge = @amount LIMIT 1";

                        using (MySqlCommand cmd = new MySqlCommand(query, conn))
                        {
                            cmd.Parameters.AddWithValue("@InquiryNumber", Anfragennummer);
                            cmd.Parameters.AddWithValue("@surchargeType", selectedItemSurchargeType);
                            cmd.Parameters.AddWithValue("@description", selectedItemDescription);
                            cmd.Parameters.AddWithValue("@amount", selectedItemAmount);

                            int rowsAffected = cmd.ExecuteNonQuery();
                            if (rowsAffected > 0)
                            {
                                MessageBox.Show("Item deleted successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);

                                // Ensure that there is a selected item before trying to remove it
                                if (listSurcharge.SelectedItems.Count > 0)
                                {
                                    listSurcharge.Items.Remove(listSurcharge.SelectedItems[0]);
                                }
                            }
                            else
                            {
                                MessageBox.Show("No item found with the specified details.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"An error occurred while deleting the item: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }


            //Following will populate the ListSurcharge

            // Clear the existing items and columns
            ListInquirySurcharge.Items.Clear();
            ListInquirySurcharge.Columns.Clear();

            // Add columns to the ListView
            ListInquirySurcharge.Columns.Add("Zuschlagsart", 100);
            ListInquirySurcharge.Columns.Add("Beschreibung", 100);
            ListInquirySurcharge.Columns.Add("Menge", 100);

            // Fetch rows from the database
            List<string[]> rows = InquiryGetRows(txtInquiryNumber.Text);

            // Add each row to the ListView
            foreach (var row in rows)
            {
                ListInquirySurcharge.Items.Add(new ListViewItem(row));
            }

        }

        private void listInquiryPositions_SelectedIndexChanged(object sender, EventArgs e)
        {
            DeleteInquiryPositionDetails();

            //Auftragsnummer
            //Positionsnummer
            //LaufendeAnfragennummer

            if (!String.IsNullOrEmpty(txtInquiryNumber.Text) && listInquiryPositions.SelectedItem != null && !String.IsNullOrEmpty(listInquiryPositions.SelectedItem.ToString()))
            {

                // Trim the input values to remove any unwanted spaces
                string inquiryNumber = txtInquiryNumber.Text.Trim();
                string inquiryPosition = listInquiryPositions.SelectedItem.ToString();
                string InquiryContinuousPositionNo = null;

                string query = @"SELECT `LaufendeAnfragenPositionsnummer` 
                 FROM `prostahl`.`anfragenposition` 
                 WHERE `Auftragsnummer` = @InquiryNumber 
                   AND `Positionsnummer` = @PositionNumber 
                 ORDER BY `Auftragsnummer` ASC 
                 LIMIT 1";

                try
                {
                    using (MySqlConnection connection = new MySqlConnection(connectionString))
                    {
                        connection.Open();
                        using (MySqlCommand command = new MySqlCommand(query, connection))
                        {
                            // Use parameterized query to pass the values safely
                            command.Parameters.AddWithValue("@InquiryNumber", inquiryNumber);
                            command.Parameters.AddWithValue("@PositionNumber", inquiryPosition);

                            // Execute query
                            object result = command.ExecuteScalar();

                            if (result != null)
                            {
                                InquiryContinuousPositionNo = result.ToString();
                            }
                            else
                            {
                                MessageBox.Show("No matching record found.", "Result", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }


                string ArticleNumber = GetFieldValue("Artikelnummer", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                txtInquiryPositionOD.Text = GetFieldValue("Außendurchmesser", ArticleNumber, "artikelrohre", "Artikelnummer");
                txtInquiryPositionWT.Text = GetFieldValue("Wandstärke", ArticleNumber, "artikelrohre", "Artikelnummer");
                listInquiryPositionsMaterials.Text = GetFieldValue("Werkstoff", ArticleNumber, "artikelrohre", "Artikelnummer");
                txtInquiryPositionLength.Text = GetFieldValue("Lange", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                txtInquiryPositionMinLength.Text = GetFieldValue("Langentoleranzmin", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                txtInquiryPositionMaxLength.Text = GetFieldValue("Langentoleranzmax", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                txtInquiryPositionQuantity.Text = GetFieldValue("Menge", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                txtInquiryPositionMinQuantity.Text = GetFieldValue("Mengentoleranzmin", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                txtInquiryPositionMaxQuantity.Text = GetFieldValue("Mengentoleranzmax", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                if (!String.IsNullOrEmpty(inquiryPosition))
                {
                    switch (int.Parse(GetFieldValue("MengeEinheit", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer")))
                    {
                        case 0:
                            cmbInquiryPositionQuantityUnit.Text = "Stk.";
                            break;
                        case 1:
                            cmbInquiryPositionQuantityUnit.Text = "m";
                            break;
                        case 2:
                            cmbInquiryPositionQuantityUnit.Text = "To";
                            break;
                    }

                    switch (int.Parse(GetFieldValue("MengentoleranzEinheit", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer")))
                    {
                        case 0:
                            cmbInquiryPositionQuantityTolUnit.Text = "%";
                            break;
                        case 1:
                            cmbInquiryPositionQuantityTolUnit.Text = "Stk.";
                            break;
                        case 2:
                            cmbInquiryPositionQuantityTolUnit.Text = "m";
                            break;
                    }

                    switch (int.Parse(GetFieldValue("PreisEinheit", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer")))
                    {
                        case 0:
                            cmbInquiryPositionPriceUnit.Text = "Stk.";
                            break;
                        case 1:
                            cmbInquiryPositionPriceUnit.Text = "m";
                            break;
                        case 2:
                            cmbInquiryPositionPriceUnit.Text = "To";
                            break;
                    }
                }
                cmInquiryPositionD.Text = GetFieldValue("1127D", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                cmInquiryPositionT.Text = GetFieldValue("1127T", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                cmInquiryPositionDIN.Text = GetFieldValue("Norm", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                cmInquiryPositionDinExec.Text = GetFieldValue("Ausfuhrung", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                cmInquiryPositionCert.Text = GetFieldValue("WAZ", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                chkInquiryPositionfromStock.Checked = false;
                chkInquiryPositionBrushing.Checked = false;
                txtInquiryPositionBrushingQuality.Text = GetFieldValue("Kornung", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                txtInquiryPosText.Text = GetFieldValue("Bemerkung", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                txtInquiryPositionKLMax.Text = GetFieldValue("KlMax", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                txtInquiryPositionPrice.Text = GetFieldValue("Preis", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                txtInquiryPositionDeliveryTime.Text = GetFieldValue("Liefertermin", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
            }
        }

        private void DeleteInquiryPositionDetails()
        {
            txtInquiryPositionOD.Text = "";
            txtInquiryPositionWT.Text = "";
            listInquiryPositionsMaterials.ResetText();
            listInquiryPositionArticle.ResetText();
            txtInquiryPositionLength.Text = "";
            txtInquiryPositionMinLength.Text = "";
            txtInquiryPositionMaxLength.Text = "";
            txtInquiryPositionQuantity.Text = "";
            txtInquiryPositionMinQuantity.Text = "";
            txtInquiryPositionMaxQuantity.Text = "";
            cmbInquiryPositionQuantityUnit.ResetText();
            cmbInquiryPositionQuantityTolUnit.ResetText();
            cmInquiryPositionD.ResetText();
            cmInquiryPositionT.ResetText();
            cmInquiryPositionDIN.ResetText();
            cmInquiryPositionDinExec.ResetText();
            cmInquiryPositionCert.ResetText();
            chkInquiryPositionfromStock.Checked = false;
            chkInquiryPositionBrushing.Checked = false;
            txtInquiryPositionBrushingQuality.Text = "";
            txtInquiryPosText.Text = "";
            txtInquiryPositionKLMax.Text = "";
            txtInquiryPositionPrice.Text = "";
            cmbInquiryPositionPriceUnit.ResetText();
            txtInquiryPositionDeliveryTime.Text = "";
        }

        private void InquiryPositionsMaterialLoad()
        {
            if (listInquiryPositionsMaterials.SelectedItems.Count == 0)
            {
                string query = $"SELECT * FROM `prostahl`.`werkstoffe` ORDER BY `Werkstoff` ASC LIMIT 1000";

                //This Code block is for the Listbox for Material Selection
                listInquiryPositionsMaterials.Items.Clear();

                try
                {
                    using (MySqlConnection connection = new MySqlConnection(connectionString))
                    {
                        connection.Open();


                        MySqlCommand command = new MySqlCommand(query, connection);

                        using (MySqlDataReader reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                // Read values from columns
                                string readout = reader.GetString(1); // Assuming the searched value is at index 1

                                // Do something with the values...
                                listInquiryPositionsMaterials.Items.Add(readout);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Error: " + ex.Message);
                }
            }
        }

        private void txtInquiryPositionOD_TextChanged(object sender, EventArgs e)
        {
            PopulateInquiryCreationArticleSelectionList();
            InquiryPositionsMaterialLoad();
        }

        private void txtInquiryPositionWT_TextChanged(object sender, EventArgs e)
        {
            PopulateInquiryCreationArticleSelectionList();
            InquiryPositionsMaterialLoad();
        }

        private void listInquiryPositionsMaterials_SelectedIndexChanged(object sender, EventArgs e)
        {
            PopulateInquiryCreationArticleSelectionList();
        }

        private void PopulateInquiryCreationArticleSelectionList()
        {
            listInquiryPositionArticle.Items.Clear();
            listInquiryPositionArticle.Columns.Clear(); // Clear existing columns before adding new ones

            // Add columns
            listInquiryPositionArticle.Columns.Add("Außendurchmesser");
            listInquiryPositionArticle.Columns.Add("Wandstärke");
            listInquiryPositionArticle.Columns.Add("Werkstoff");

            string query = "SELECT `Außendurchmesser`, `Wandstärke`, `Werkstoff` FROM `prostahl`.`artikelrohre` WHERE 1=1";

            if (!String.IsNullOrEmpty(txtInquiryPositionWT.Text))
            {
                float value;

                // Replace comma with dot for consistent decimal format
                string input = txtInquiryPositionWT.Text.Replace(',', '.');

                // Try parsing the input as a float
                if (float.TryParse(input, NumberStyles.Float, CultureInfo.InvariantCulture, out value))
                {
                    // Format the value to a string with a dot as the decimal separator
                    query += $" AND `Wandstärke` LIKE '%{value.ToString(CultureInfo.InvariantCulture)}%'";
                }
            }

            if (!String.IsNullOrEmpty(txtInquiryPositionOD.Text))
            {
                float value;

                // Replace comma with dot for consistent decimal format
                string input = txtInquiryPositionOD.Text.Replace(',', '.');

                // Try parsing the input as a float
                if (float.TryParse(input, NumberStyles.Float, CultureInfo.InvariantCulture, out value))
                {
                    // Format the value to a string with a dot as the decimal separator
                    query += $" AND `Außendurchmesser` LIKE '%{value.ToString(CultureInfo.InvariantCulture)}%'";
                }
            }

            if (listInquiryPositionsMaterials.SelectedItem != null && !String.IsNullOrEmpty(listInquiryPositionsMaterials.SelectedItem.ToString()))
            {
                query += $" AND `Werkstoff` = {listInquiryPositionsMaterials.SelectedItem.ToString()}";
            }

            query += " ORDER BY `Werkstoff` ASC LIMIT 1000";

            Debug.WriteLine(query);

            try
            {
                using (MySqlConnection connection = new MySqlConnection(connectionString))
                {
                    connection.Open();

                    using (MySqlCommand command = new MySqlCommand(query, connection))
                    {

                        using (MySqlDataReader reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                //MessageBox.Show(reader.GetValue(0).ToString());
                                //MessageBox.Show(reader.GetValue(1).ToString());
                                //MessageBox.Show(reader.GetString(2));



                                ListViewItem item = new ListViewItem(reader.GetValue(0).ToString());
                                item.SubItems.Add(reader.GetValue(1).ToString());
                                item.SubItems.Add(reader.GetString(2));
                                listInquiryPositionArticle.Items.Add(item);

                            }
                        }
                    }



                    // Resize columns based on content
                    listInquiryPositionArticle.Columns[0].AutoResize(ColumnHeaderAutoResizeStyle.HeaderSize);
                    listInquiryPositionArticle.Columns[1].AutoResize(ColumnHeaderAutoResizeStyle.HeaderSize);
                    listInquiryPositionArticle.Columns[2].AutoResize(ColumnHeaderAutoResizeStyle.HeaderSize);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }
        }

        private void cmInquiryPositionDIN_SelectedIndexChanged(object sender, EventArgs e)
        {
            //This should adapt the List of technical Specifications according to which the Tube will be made.

            cmInquiryPositionDinExec.Items.Clear();
            cmInquiryPositionDinExec.ResetText();
            //0 10217 TC1
            //1 10217 TC2
            //2 10296
            //3 SEW470
            //4 EN10357

            switch (cmInquiryPositionDIN.SelectedIndex)
            {
                case 0:
                    cmInquiryPositionDinExec.Items.Add("W0");
                    cmInquiryPositionDinExec.Items.Add("W1R");
                    cmInquiryPositionDinExec.Items.Add("W2R");
                    cmInquiryPositionDinExec.Items.Add("W0b");
                    cmInquiryPositionDinExec.Items.Add("W1Rb");
                    cmInquiryPositionDinExec.Items.Add("W2Rb");
                    cmInquiryPositionDinExec.Items.Add("W1R/W2R");
                    cmInquiryPositionDinExec.Items.Add("W1Rb/W2Rb");
                    cmInquiryPositionDinExec.Items.Add("W1");
                    cmInquiryPositionDinExec.Items.Add("W1b");
                    cmInquiryPositionDinExec.Items.Add("W1A");
                    cmInquiryPositionDinExec.Items.Add("W1Ab");
                    cmInquiryPositionDinExec.Items.Add("W2");
                    cmInquiryPositionDinExec.Items.Add("W2b");
                    cmInquiryPositionDinExec.Items.Add("W2A");
                    cmInquiryPositionDinExec.Items.Add("W2Ab");
                    cmInquiryPositionDinExec.Items.Add("WCA");
                    cmInquiryPositionDinExec.Items.Add("WG");
                    cmInquiryPositionDinExec.Items.Add("WP");
                    break;
                case 1:
                    cmInquiryPositionDinExec.Items.Add("W0");
                    cmInquiryPositionDinExec.Items.Add("W1R");
                    cmInquiryPositionDinExec.Items.Add("W2R");
                    cmInquiryPositionDinExec.Items.Add("W0b");
                    cmInquiryPositionDinExec.Items.Add("W1Rb");
                    cmInquiryPositionDinExec.Items.Add("W2Rb");
                    cmInquiryPositionDinExec.Items.Add("W1R/W2R");
                    cmInquiryPositionDinExec.Items.Add("W1Rb/W2Rb");
                    cmInquiryPositionDinExec.Items.Add("W1");
                    cmInquiryPositionDinExec.Items.Add("W1b");
                    cmInquiryPositionDinExec.Items.Add("W1A");
                    cmInquiryPositionDinExec.Items.Add("W1Ab");
                    cmInquiryPositionDinExec.Items.Add("W2");
                    cmInquiryPositionDinExec.Items.Add("W2b");
                    cmInquiryPositionDinExec.Items.Add("W2A");
                    cmInquiryPositionDinExec.Items.Add("W2Ab");
                    cmInquiryPositionDinExec.Items.Add("WCA");
                    cmInquiryPositionDinExec.Items.Add("WG");
                    cmInquiryPositionDinExec.Items.Add("WP");
                    break;
                case 2:
                    cmInquiryPositionDinExec.Items.Add("+AR");
                    cmInquiryPositionDinExec.Items.Add("+AT");
                    cmInquiryPositionDinExec.Items.Add("+AR + Glätten");
                    cmInquiryPositionDinExec.Items.Add("+AT + Glätten");
                    break;
                case 3:
                    cmInquiryPositionDinExec.Items.Add("-");
                    cmInquiryPositionDinExec.Items.Add("Glätten");
                    cmInquiryPositionDinExec.Items.Add("Glühen");
                    cmInquiryPositionDinExec.Items.Add("Glühen + Glätten");
                    break;
                case 4:
                    cmInquiryPositionDinExec.Items.Add("CL1 CM");
                    cmInquiryPositionDinExec.Items.Add("CL1 CD");
                    cmInquiryPositionDinExec.Items.Add("CL1 BC");
                    cmInquiryPositionDinExec.Items.Add("CL1 BD");
                    cmInquiryPositionDinExec.Items.Add("CL2 CM");
                    cmInquiryPositionDinExec.Items.Add("CL2 CD");
                    cmInquiryPositionDinExec.Items.Add("CL2 BC");
                    cmInquiryPositionDinExec.Items.Add("CL2 BD");
                    break;
            }
        }

        private void txtInquiryPosition_TextChanged(object sender, EventArgs e)
        {
            InquiryPositionsMaterialLoad();
            DeleteInquiryPositionDetails();

            listInquiryPositionsMaterials.SelectedItems.Clear();
            string inquiryNumber = txtInquiryNumber.Text.Trim();
            string inquiryPosition = txtInquiryPosition.Text.Trim();
            string InquiryContinuousPositionNo = null;

            string query = @"SELECT `LaufendeAnfragenPositionsnummer` 
                 FROM `prostahl`.`anfragenposition` 
                 WHERE `Auftragsnummer` = @InquiryNumber 
                   AND `Positionsnummer` = @PositionNumber 
                 ORDER BY `Auftragsnummer` ASC 
                 LIMIT 1";

            try
            {
                using (MySqlConnection connection = new MySqlConnection(connectionString))
                {
                    connection.Open();
                    using (MySqlCommand command = new MySqlCommand(query, connection))
                    {
                        // Use parameterized query to pass the values safely
                        command.Parameters.AddWithValue("@InquiryNumber", inquiryNumber);
                        command.Parameters.AddWithValue("@PositionNumber", inquiryPosition);

                        // Execute query
                        object result = command.ExecuteScalar();

                        if (result != null)
                        {
                            InquiryContinuousPositionNo = result.ToString();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            if (!String.IsNullOrEmpty(InquiryContinuousPositionNo))
            {
                string ArticleNumber = GetFieldValue("Artikelnummer", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                txtInquiryPositionOD.Text = GetFieldValue("Außendurchmesser", ArticleNumber, "artikelrohre", "Artikelnummer");
                txtInquiryPositionWT.Text = GetFieldValue("Wandstärke", ArticleNumber, "artikelrohre", "Artikelnummer");
                listInquiryPositionsMaterials.Text = GetFieldValue("Werkstoff", ArticleNumber, "artikelrohre", "Artikelnummer");
                txtInquiryPositionLength.Text = GetFieldValue("Lange", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                txtInquiryPositionMinLength.Text = GetFieldValue("Langentoleranzmin", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                txtInquiryPositionMaxLength.Text = GetFieldValue("Langentoleranzmax", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                txtInquiryPositionQuantity.Text = GetFieldValue("Menge", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                txtInquiryPositionMinQuantity.Text = GetFieldValue("Mengentoleranzmin", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                txtInquiryPositionMaxQuantity.Text = GetFieldValue("Mengentoleranzmax", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                if (!String.IsNullOrEmpty(inquiryPosition))
                {
                    switch (int.Parse(GetFieldValue("MengeEinheit", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer")))
                    {
                        case 0:
                            cmbInquiryPositionQuantityUnit.Text = "Stk.";
                            break;
                        case 1:
                            cmbInquiryPositionQuantityUnit.Text = "m";
                            break;
                        case 2:
                            cmbInquiryPositionQuantityUnit.Text = "To";
                            break;
                    }

                    switch (int.Parse(GetFieldValue("MengentoleranzEinheit", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer")))
                    {
                        case 0:
                            cmbInquiryPositionQuantityTolUnit.Text = "%";
                            break;
                        case 1:
                            cmbInquiryPositionQuantityTolUnit.Text = "Stk.";
                            break;
                        case 2:
                            cmbInquiryPositionQuantityTolUnit.Text = "m";
                            break;
                    }

                    switch (int.Parse(GetFieldValue("PreisEinheit", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer")))
                    {
                        case 0:
                            cmbInquiryPositionPriceUnit.Text = "Stk.";
                            break;
                        case 1:
                            cmbInquiryPositionPriceUnit.Text = "m";
                            break;
                        case 2:
                            cmbInquiryPositionPriceUnit.Text = "To";
                            break;
                    }
                }
                cmInquiryPositionD.Text = GetFieldValue("1127D", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                cmInquiryPositionT.Text = GetFieldValue("1127T", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                cmInquiryPositionDIN.Text = GetFieldValue("Norm", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                cmInquiryPositionDinExec.Text = GetFieldValue("Ausfuhrung", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                cmInquiryPositionCert.Text = GetFieldValue("WAZ", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                chkInquiryPositionfromStock.Checked = false;
                chkInquiryPositionBrushing.Checked = false;
                txtInquiryPositionBrushingQuality.Text = GetFieldValue("Kornung", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                txtInquiryPosText.Text = GetFieldValue("Bemerkung", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                txtInquiryPositionKLMax.Text = GetFieldValue("KlMax", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                txtInquiryPositionPrice.Text = GetFieldValue("Preis", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");
                txtInquiryPositionDeliveryTime.Text = GetFieldValue("Liefertermin", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");

            }
        }

        private void listInquiryPositionArticle_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (listInquiryPositionArticle.SelectedItems.Count > 0)
            {
                txtInquiryPositionOD.TextChanged -= txtInquiryPositionOD_TextChanged;
                txtInquiryPositionOD.Text = listInquiryPositionArticle.SelectedItems[0].SubItems[0].Text;
                txtInquiryPositionOD.TextChanged += txtInquiryPositionOD_TextChanged;

                txtInquiryPositionWT.TextChanged -= txtInquiryPositionWT_TextChanged;
                txtInquiryPositionWT.Text = listInquiryPositionArticle.SelectedItems[0].SubItems[1].Text;
                txtInquiryPositionWT.TextChanged += txtInquiryPositionWT_TextChanged;
            }
        }

        private void txtInquiryPositionPricePerMeter_TextChanged(object sender, EventArgs e)
        {
            if (txtInquiryPositionOD.Text != null && txtInquiryPositionWT.Text != null && txtInquiryPositionPricePerMeter.Text != null && txtInquiryPositionPricePerMeter.Focused)
            {
                txtInquiryPositionPrice.Text = CalculatePricePerKG(double.Parse(txtInquiryPositionOD.Text), double.Parse(txtInquiryPositionWT.Text), double.Parse(txtInquiryPositionPricePerMeter.Text)).ToString("F2");
            }
        }

        private void btnInquiryPositionDelete_Click(object sender, EventArgs e)
        {
            string inquiryNumber = null;
            string inquiryPosition = null;
            inquiryNumber = txtInquiryNumber.Text.Trim();


            if (!string.IsNullOrEmpty(txtInquiryNumber.Text) && (!string.IsNullOrEmpty(txtInquiryPosition.Text) || listInquiryPositions.SelectedItem != null))
            {
                if (!string.IsNullOrEmpty(txtInquiryPosition.Text))
                {
                    inquiryPosition = txtInquiryPosition.Text.Trim();

                }
                else if (listInquiryPositions.SelectedItem != null)
                {
                    inquiryPosition = listInquiryPositions.SelectedItem.ToString();
                }

                string InquiryContinuousPositionNo = null;

                string query = @"SELECT `LaufendeAnfragenPositionsnummer` 
                 FROM `prostahl`.`anfragenposition` 
                 WHERE `Auftragsnummer` = @InquiryNumber 
                   AND `Positionsnummer` = @PositionNumber 
                 ORDER BY `Auftragsnummer` ASC 
                 LIMIT 1";

                try
                {
                    using (MySqlConnection connection = new MySqlConnection(connectionString))
                    {
                        connection.Open();
                        using (MySqlCommand command = new MySqlCommand(query, connection))
                        {
                            // Use parameterized query to pass the values safely
                            command.Parameters.AddWithValue("@InquiryNumber", inquiryNumber);
                            command.Parameters.AddWithValue("@PositionNumber", inquiryPosition);

                            // Execute query
                            object InquiryResult = command.ExecuteScalar();

                            if (InquiryResult != null)
                            {
                                InquiryContinuousPositionNo = InquiryResult.ToString();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }

                string ArticleNumber = GetFieldValue("Artikelnummer", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer");

                //Unit Selection
                //Tol Unit Selection
                string QuantityUnit = null;
                switch (int.Parse(GetFieldValue("MengeEinheit", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer")))
                {
                    case 0:
                        QuantityUnit = "Stk.";
                        break;
                    case 1:
                        QuantityUnit = "m";
                        break;
                    case 2:
                        QuantityUnit = "To";
                        break;
                }

                string QuantityTolUnit = null;
                switch (int.Parse(GetFieldValue("MengentoleranzEinheit", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer")))
                {
                    case 0:
                        QuantityTolUnit = "%";
                        break;
                    case 1:
                        QuantityTolUnit = "Stk.";
                        break;
                    case 2:
                        QuantityTolUnit = "m";
                        break;
                }

                DialogResult result = MessageBox.Show(
                    $"Auftragsnummer: {inquiryNumber}{Environment.NewLine}" +
                    $"Anfragenposition: {inquiryPosition}{Environment.NewLine}" +
                    $"Laufende Positionsnummer: {InquiryContinuousPositionNo}{Environment.NewLine}" +
                    $"Artikelnummer: {ArticleNumber}{Environment.NewLine}" +
                    $"Außendurchmesser: {GetFieldValue("Außendurchmesser", ArticleNumber, "artikelrohre", "Artikelnummer")}{Environment.NewLine}" +
                    $"Wandstärke: {GetFieldValue("Wandstärke", ArticleNumber, "artikelrohre", "Artikelnummer")}{Environment.NewLine}" +
                    $"Werkstoff: {GetFieldValue("Werkstoff", ArticleNumber, "artikelrohre", "Artikelnummer")}{Environment.NewLine}" +
                    $"Soll Länge: {GetFieldValue("Lange", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer")}{Environment.NewLine}" +
                    $"Längentoleranz: -{GetFieldValue("Langentoleranzmin", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer")}/+{GetFieldValue("Langentoleranzmax", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer")}{Environment.NewLine}" +
                    $"Bestellmenge: {GetFieldValue("Menge", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer")} {QuantityUnit}{Environment.NewLine}" +
                    $"Mengentoleranz: -{GetFieldValue("Mengentoleranzmin", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer")}/+{GetFieldValue("Mengentoleranzmax", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer")} {QuantityTolUnit} {Environment.NewLine}" +
                    $"Preis pro Stück: {GetFieldValue("PreisStk", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer")}{Environment.NewLine}" +
                    $"Preis pro Meter: {GetFieldValue("PreisM", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer")}{Environment.NewLine}" +
                    $"Liefertermin: {GetFieldValue("Liefertermin", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer")}{Environment.NewLine}" +
                    $"KL Max. %: {GetFieldValue("KlMax", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer")}{Environment.NewLine}" +
                    $"D?: {GetFieldValue("1127D", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer")}{Environment.NewLine}" +
                    $"T?: {GetFieldValue("1127T", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer")}{Environment.NewLine}" +
                    $"Norm: {GetFieldValue("Norm", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer")}{Environment.NewLine}" +
                    $"Ausführung: {GetFieldValue("Ausfuhrung", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer")}{Environment.NewLine}" +
                    $"Glühen: {GetFieldValue("Gluhen", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer")}{Environment.NewLine}" +
                    $"Glätten?: {GetFieldValue("Glatten", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer")}{Environment.NewLine}" +
                    $"Zeugnis: {GetFieldValue("WAZ", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer")}{Environment.NewLine}" +
                    $"Vorrat?: {GetFieldValue("Vorrat", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer")}{Environment.NewLine}" +
                    $"Bürsten: {GetFieldValue("Bursten", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer")} {Environment.NewLine}" +
                    $"Körnung: {GetFieldValue("Kornung", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer")}{Environment.NewLine}" +
                    $"Anmerkungen: {GetFieldValue("Bemerkung", InquiryContinuousPositionNo, "anfragenposition", "LaufendeAnfragenPositionsnummer")}{Environment.NewLine}",
                    "Do you really Want to Delete ? ", // Title of the message box
                    MessageBoxButtons.YesNo // Buttons for the message box
                    );

                // Check the Length of the MessageBox
                if (result == DialogResult.Yes)
                {
                    try
                    {
                        using (MySqlConnection connection = new MySqlConnection(connectionString))
                        {
                            connection.Open();

                            string deleteQuery = $"DELETE FROM `anfragenposition` WHERE LaufendeAnfragenPositionsnummer = @LaufendeAnfragenPositionsnummer";
                            MySqlCommand command = new MySqlCommand(deleteQuery, connection);

                            // Add parameters
                            command.Parameters.AddWithValue("@LaufendeAnfragenPositionsnummer", InquiryContinuousPositionNo);

                            // Execute the query
                            int rowsAffected = command.ExecuteNonQuery();

                            // Check if the deletion was successful
                            if (rowsAffected > 0)
                            {
                                MessageBox.Show("Position deleted successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }
                            else
                            {
                                MessageBox.Show("Failed to delete the position.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("Error: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
        }

        private void listInquiryCustomer_SelectedIndexChanged(object sender, EventArgs e)
        {
            txtInquiryCustomerContact.Text = GetFieldValue("Einkäufer_Name", listInquiryCustomer.SelectedItem.ToString(), "kunden", "Firmenname");
            txtInquiryCustomerStreet.Text = GetFieldValue("Rechnung_Straße", listInquiryCustomer.SelectedItem.ToString(), "kunden", "Firmenname");
            txtInquiryCustomerStreetNumber.Text = GetFieldValue("Rechnung_Hausnummer", listInquiryCustomer.SelectedItem.ToString(), "kunden", "Firmenname");
            txtInquiryCustomerPostcode.Text = GetFieldValue("Rechnung_PLZ", listInquiryCustomer.SelectedItem.ToString(), "kunden", "Firmenname");
            txtInquiryCustomerCity.Text = GetFieldValue("Rechnung_Stadt", listInquiryCustomer.SelectedItem.ToString(), "kunden", "Firmenname");
            txtInquiryCustomerCountry.Text = GetFieldValue("Rechnung_Land", listInquiryCustomer.SelectedItem.ToString(), "kunden", "Firmenname");
        }

        private void listInquiryDeliveryAdresses_SelectedIndexChanged(object sender, EventArgs e)
        {
            txtInquiryDeliveryContact.Text = GetFieldValue("Ansprechpartner", listInquiryDeliveryAdresses.SelectedItem.ToString(), "lieferanschrift", "Firmenname");
            txtInquiryDeliveryStreet.Text = GetFieldValue("Straße", listInquiryDeliveryAdresses.SelectedItem.ToString(), "lieferanschrift", "Firmenname");
            txtInquiryDeliveryNumber.Text = GetFieldValue("Hausnummer", listInquiryDeliveryAdresses.SelectedItem.ToString(), "lieferanschrift", "Firmenname");
            txtInquiryDeliveryPostcode.Text = GetFieldValue("PLZ", listInquiryDeliveryAdresses.SelectedItem.ToString(), "lieferanschrift", "Firmenname");
            txtInquiryDeliveryCity.Text = GetFieldValue("Stadt", listInquiryDeliveryAdresses.SelectedItem.ToString(), "lieferanschrift", "Firmenname");
            txtInquiryDeliveryCountry.Text = GetFieldValue("Land", listInquiryDeliveryAdresses.SelectedItem.ToString(), "lieferanschrift", "Firmenname");
        }

        private void btnInquiryCreatePDF_Click(object sender, EventArgs e)
        {
            if (!String.IsNullOrEmpty(txtInquiryNumber.Text))
            {
                int PositionenAnzahl = 0;
                int ZuschlägeAnzahl = 0;

                string Anfragennummer = txtInquiryNumber.Text;


                using (MySqlConnection conn = new MySqlConnection(connectionString))
                {
                    conn.Open();
                    string countQuery = $"SELECT COUNT(*) FROM anfragenposition WHERE Anfragennummer = {Anfragennummer}";

                    using (MySqlCommand cmd = new MySqlCommand(countQuery, conn))
                    {
                        PositionenAnzahl = Convert.ToInt32(cmd.ExecuteScalar());
                    }
                }

                using (MySqlConnection conn = new MySqlConnection(connectionString))
                {
                    conn.Open();
                    string countQuery = $"SELECT COUNT(*) FROM anfragenzuschläge WHERE Anfragennummer = {Anfragennummer}";

                    using (MySqlCommand cmd = new MySqlCommand(countQuery, conn))
                    {
                        ZuschlägeAnzahl = Convert.ToInt32(cmd.ExecuteScalar());
                    }
                }


                PDFInquirySurcharge[] InquirySurcharges = new PDFInquirySurcharge[ZuschlägeAnzahl];

                PDFInquiryPositionData[] InquiryPositions = new PDFInquiryPositionData[PositionenAnzahl];


                using (MySqlConnection conn = new MySqlConnection(connectionString))
                {
                    int PosCounter = 0;

                    string countQuery = $"SELECT LaufendeAnfragenPositionsnummer FROM anfragenposition WHERE Anfragennummer = {Anfragennummer}";

                    Debug.WriteLine(countQuery);

                    try
                    {
                        using (MySqlConnection connection = new MySqlConnection(connectionString))
                        {
                            connection.Open();

                            using (MySqlCommand command = new MySqlCommand(countQuery, connection))
                            {

                                using (MySqlDataReader reader = command.ExecuteReader())
                                {
                                    while (reader.Read())
                                    {

                                        string ReaderPos = reader.GetValue(0).ToString();

                                        int Pos = int.Parse(ReaderPos);

                                        string Mengeneinheit = "";

                                        switch (int.Parse(GetFieldValue("MengeEinheit", ReaderPos, "anfragenposition", "LaufendeAnfragenPositionsnummer")))
                                        {
                                            case 0:
                                                Mengeneinheit = "Stk.";
                                                break;
                                            case 1:
                                                Mengeneinheit = "m";
                                                break;
                                            case 2:
                                                Mengeneinheit = "To";
                                                break;
                                        }

                                        string Mengentoleranzeinheit = "";

                                        switch (int.Parse(GetFieldValue("MengentoleranzEinheit", ReaderPos, "anfragenposition", "LaufendeAnfragenPositionsnummer")))
                                        {
                                            case 0:
                                                Mengentoleranzeinheit = "%";
                                                break;
                                            case 1:
                                                Mengentoleranzeinheit = "Stk.";
                                                break;
                                            case 2:
                                                Mengentoleranzeinheit = "m";
                                                break;
                                        }

                                        string Preiseinheit = "";

                                        switch (int.Parse(GetFieldValue("PreisEinheit", ReaderPos, "anfragenposition", "LaufendeAnfragenPositionsnummer")))
                                        {
                                            case 0:
                                                Preiseinheit = "Stk.";
                                                break;
                                            case 1:
                                                Preiseinheit = "m";
                                                break;
                                            case 2:
                                                Preiseinheit = "To";
                                                break;
                                        }

                                        // Initialize each array element before assigning values
                                        InquiryPositions[PosCounter] = new PDFInquiryPositionData
                                        {
                                            Position = (PosCounter).ToString(),
                                            AD = GetFieldValue("Außendurchmesser", GetFieldValue("Artikelnummer", ReaderPos, "anfragenposition", "LaufendeAnfragenPositionsnummer"), "artikelrohre", "Artikelnummer"),
                                            WS = GetFieldValue("Wandstärke", GetFieldValue("Artikelnummer", ReaderPos, "anfragenposition", "LaufendeAnfragenPositionsnummer"), "artikelrohre", "Artikelnummer"),
                                            Werkstoff = GetFieldValue("Werkstoff", GetFieldValue("Artikelnummer", ReaderPos, "anfragenposition", "LaufendeAnfragenPositionsnummer"), "artikelrohre", "Artikelnummer"),
                                            Lange = GetFieldValue("Lange", ReaderPos, "anfragenposition", "LaufendeAnfragenPositionsnummer"),
                                            Langetolmin = GetFieldValue("Langentoleranzmin", ReaderPos, "anfragenposition", "LaufendeAnfragenPositionsnummer"),
                                            Langetolmax = GetFieldValue("Langentoleranzmax", ReaderPos, "anfragenposition", "LaufendeAnfragenPositionsnummer"),
                                            Menge = GetFieldValue("Menge", ReaderPos, "anfragenposition", "LaufendeAnfragenPositionsnummer"),
                                            Mengetolmin = GetFieldValue("Mengentoleranzmin", ReaderPos, "anfragenposition", "LaufendeAnfragenPositionsnummer"),
                                            Mengetolmax = GetFieldValue("Mengentoleranzmax", ReaderPos, "anfragenposition", "LaufendeAnfragenPositionsnummer"),
                                            T1127D = GetFieldValue("1127D", ReaderPos, "anfragenposition", "LaufendeAnfragenPositionsnummer"),
                                            T1127T = GetFieldValue("1127T", ReaderPos, "anfragenposition", "LaufendeAnfragenPositionsnummer"),
                                            Liefertermin = GetFieldValue("Liefertermin", ReaderPos, "anfragenposition", "LaufendeAnfragenPositionsnummer"),
                                            Preis = GetFieldValue("Preis", ReaderPos, "anfragenposition", "LaufendeAnfragenPositionsnummer"),
                                            Norm = GetFieldValue("Norm", ReaderPos, "anfragenposition", "LaufendeAnfragenPositionsnummer"),
                                            Ausfuhrung = GetFieldValue("Ausfuhrung", ReaderPos, "anfragenposition", "LaufendeAnfragenPositionsnummer"),
                                            WAZ = GetFieldValue("WAZ", ReaderPos, "anfragenposition", "LaufendeAnfragenPositionsnummer"),
                                            Bemerkung = GetFieldValue("Bemerkung", ReaderPos, "anfragenposition", "LaufendeAnfragenPositionsnummer"),
                                            klMax = GetFieldValue("KlMax", ReaderPos, "anfragenposition", "LaufendeAnfragenPositionsnummer"),
                                            MengeEinheit = Mengeneinheit,
                                            MengetolEinheit = Mengentoleranzeinheit,
                                            PreisEinheit = Preiseinheit,
                                        };

                                        PosCounter += 1;
                                    }
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine(ex.Message);
                    }

                    PosCounter = 0;

                    countQuery = $"SELECT LaufendeZuschlagsnummer FROM anfragenzuschläge WHERE Anfragennummer = {Anfragennummer}";

                    Debug.WriteLine(countQuery);

                    try
                    {
                        using (MySqlConnection connection = new MySqlConnection(connectionString))
                        {
                            connection.Open();

                            using (MySqlCommand command = new MySqlCommand(countQuery, connection))
                            {

                                using (MySqlDataReader reader = command.ExecuteReader())
                                {
                                    while (reader.Read())
                                    {
                                        string ReaderInt = reader.GetValue(0).ToString();

                                        InquirySurcharges[PosCounter] = new PDFInquirySurcharge
                                        {
                                            Beschreibung = GetFieldValue("Beschreibung", ReaderInt, "anfragenzuschläge", "LaufendeZuschlagsnummer"),
                                            Menge = GetFieldValue("Menge", ReaderInt, "anfragenzuschläge", "LaufendeZuschlagsnummer"),
                                            Zuschlagsart = GetFieldValue("Zuschlagsart", ReaderInt, "anfragenzuschläge", "LaufendeZuschlagsnummer"),
                                        };
                                        PosCounter += 1;
                                    }
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine(ex.Message);
                    }
                }

                Document.Create(container =>
                {

                    container.Page(page =>
                    {
                        page.Size(PageSizes.A4);
                        page.Margin(2, Unit.Centimetre);
                        page.PageColor(Colors.White);
                        page.DefaultTextStyle(x => x.FontSize(10));



                        page.Content()
                            .PaddingVertical(1, Unit.Centimetre)
                            .Column(column =>
                            {
                                column.Item().PaddingBottom(10).Text("Wir bedanken uns für Ihre Anfrage, und erlauben uns, Ihnen freibleibend und zu unseren AGB wie folgt anzubieten:");

                                foreach (var position in InquiryPositions)
                                {
                                    column.Item().Column(columnPos =>
                                    {
                                        columnPos.Item().EnsureSpace(50);
                                        columnPos.Item().PaddingTop(10).Text($"Pos. {(int.Parse(position.Position) + 1).ToString()}");
                                        columnPos.Item().Text($"WIG - geschweißte Edelstahlrohre, {position.Norm} {position.Ausfuhrung}, EN ISO 1127 D{position.T1127D} / T{position.T1127T}, Werkstoff {position.Werkstoff}, {position.WAZ}");
                                        columnPos.Item().Text($"{position.Menge} {position.MengeEinheit}        L: {position.Lange} - {position.Langetolmin} / +{position.Langetolmax}            {position.AD} x {position.WS} mm           {position.Preis} {position.PreisEinheit}");
                                        columnPos.Item().Text($"LT: {position.Liefertermin} Wochen u.V.");
                                        columnPos.Item().Text($"Mengentoleranz: -{position.Mengetolmin}/+{position.Mengetolmax} {position.MengetolEinheit} - event. Unterlängen bis max. {position.klMax} %");
                                        columnPos.Item().Text($"{position.Bemerkung}");
                                    });
                                }

                                column.Item().EnsureSpace(100);
                                column.Item().PaddingTop(10).Text("Preise effektiv, inkl. LZ");
                                column.Item().Text("zzgl.Mwst.");
                                foreach (var position in InquirySurcharges)
                                {
                                    column.Item().Column(columnSurcharge =>
                                    {
                                        columnSurcharge.Item().Text($"+ {position.Beschreibung} {position.Menge}€ {position.Zuschlagsart}");
                                    });
                                }
                            });

                        page.Header()
                            .Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn();
                                    columns.ConstantColumn(30);
                                    columns.RelativeColumn();
                                    columns.RelativeColumn();
                                });

                                // by using custom 'Element' method, we can reuse visual configuration
                                table.Cell().Row(1).Column(1).ColumnSpan(3).AlignRight().PaddingRight(30).Element(Block).Text("EHG Edelstahl Rohrherstellung GmbH, 08237 Steinberg, Deutschland").FontSize(6); ;
                                table.Cell().Row(2).ColumnSpan(4).PaddingTop(5).PaddingBottom(5).LineHorizontal(1).LineColor(Colors.Black);
                                table.Cell().RowSpan(9).Row(2).Column(4).PaddingTop(10).Element(Block).Image("LOGO.PNG");
                                table.Cell().Row(3).Column(1).Element(Block).Text("").FontSize(6);
                                table.Cell().Row(3).Column(3).Element(Block).Text("").FontSize(6);


                                table.Cell().Row(4).Column(1).Element(Block).Text(GetFieldValue("Firmenname", (GetFieldValue("Kundennummer", txtInquiryNumber.Text, "anfragen", "Anfragenummer")), "kunden", "Kundennummer")).FontSize(8);
                                table.Cell().Row(5).Column(1).Element(Block).Text($"{GetFieldValue("Rechnung_Straße", (GetFieldValue("Kundennummer", txtInquiryNumber.Text, "anfragen", "Anfragenummer")), "kunden", "Kundennummer")} {GetFieldValue("Rechnung_Hausnummer", (GetFieldValue("Kundennummer", txtInquiryNumber.Text, "anfragen", "Anfragenummer")), "kunden", "Kundennummer")}").FontSize(8);
                                table.Cell().Row(6).Column(1).Element(Block).Text($"{GetFieldValue("Rechnung_PLZ", (GetFieldValue("Kundennummer", txtInquiryNumber.Text, "anfragen", "Anfragenummer")), "kunden", "Kundennummer")} {GetFieldValue("Rechnung_Stadt", (GetFieldValue("Kundennummer", txtInquiryNumber.Text, "anfragen", "Anfragenummer")), "kunden", "Kundennummer")}").FontSize(8);
                                table.Cell().Row(7).Column(1).Element(Block).Text(GetFieldValue("Rechnung_Land", (GetFieldValue("Kundennummer", txtInquiryNumber.Text, "anfragen", "Anfragenummer")), "kunden", "Kundennummer")).FontSize(8);
                                table.Cell().Row(8).Column(1).Element(Block).Text($"Ansprechpartner: {GetFieldValue("Einkäufer_Name", (GetFieldValue("Kundennummer", txtInquiryNumber.Text, "anfragen", "Anfragenummer")), "kunden", "Kundennummer")}").FontSize(8);
                                table.Cell().Row(9).Column(1).Element(Block).Text($"E-Mail: {GetFieldValue("Einkäufer_EMail", (GetFieldValue("Kundennummer", txtInquiryNumber.Text, "anfragen", "Anfragenummer")), "kunden", "Kundennummer")}").FontSize(8);
                                table.Cell().Row(10).Column(1).Element(Block).Text($"Telefon: {GetFieldValue("Einkäufer_Telefonnummer", (GetFieldValue("Kundennummer", txtInquiryNumber.Text, "anfragen", "Anfragenummer")), "kunden", "Kundennummer")}").FontSize(8);

                                table.Cell().Row(4).Column(3).Element(Block).Text("Sachbearbeiter: Lukas Kuhn").FontSize(8);
                                table.Cell().Row(5).Column(3).Element(Block).Text("E-Mail: l.kuhn@ehg-steinberg.de").FontSize(8);
                                table.Cell().Row(8).Column(3).PaddingTop(-19).Element(Block).Text("Telefon: +49 (0) 37462 688-18").FontSize(8);

                                table.Cell().Row(10).ColumnSpan(4).PaddingTop(20).Element(Block).Text($"Anfrage {txtInquiryNumber.Text}").FontSize(14);


                                table.Cell().Row(11).ColumnSpan(4).PaddingTop(10).LineHorizontal(2).LineColor(Colors.Red.Darken2);

                                // for simplicity, you can also use extension method described in the "Extending DSL" section
                                static IContainer Block(IContainer container)
                                {
                                    return container
                                        .AlignLeft();
                                }
                            });

                        page.Footer()

                            .AlignLeft()
                            .Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.RelativeColumn();
                                    columns.RelativeColumn();
                                    columns.RelativeColumn();
                                    columns.RelativeColumn();
                                });

                                // by using custom 'Element' method, we can reuse visual configuration
                                table.Cell().Row(1).Column(1).Element(Block).Text("EHG Edelstahl Rohrherstellung GmbH").FontSize(6);
                                table.Cell().Row(2).Column(1).Element(Block).Text("Gewerbestraße 3").FontSize(6);
                                table.Cell().Row(3).Column(1).Element(Block).Text("08237 Steinberg, OT Rothenkirchen").FontSize(6);
                                table.Cell().Row(4).Column(1).Element(Block).Text("Deutschland").FontSize(6);
                                table.Cell().Row(5).Column(1).Element(Block).Text("Telefon +49 (0) 37462 688-0").FontSize(6);
                                table.Cell().Row(6).Column(1).Element(Block).Text("Telefax +49 (0) 37462 688-22").FontSize(6);
                                table.Cell().Row(7).Column(1).Element(Block).Text("www.ehg-steinberg.de").FontSize(6);
                                table.Cell().Row(8).Column(1).Element(Block).Text("info@ehg-steinberg.de").FontSize(6);
                                table.Cell().Row(9).Column(1).Element(Block).Text("").FontSize(6);
                                table.Cell().ColumnSpan(4).Element(Block).Text("Wir arbeiten ausschließlich auf der Grundlage unserer umseitig aufgedruckten allgemeinen Verkaufsbedingungen (Stand 03.2012)").FontSize(6); ;
                                table.Cell().Row(1).Column(2).Element(Block).Text("Vetriebsbüro Weinstadt").FontSize(6);
                                table.Cell().Row(2).Column(2).Element(Block).Text("Heinkelstraße 4").FontSize(6);
                                table.Cell().Row(3).Column(2).Element(Block).Text("71384 Weinstadt").FontSize(6);
                                table.Cell().Row(4).Column(2).Element(Block).Text("Deutschland").FontSize(6);
                                table.Cell().Row(5).Column(2).Element(Block).Text("Telefon +49 (0) 7151 132-0").FontSize(6);
                                table.Cell().Row(6).Column(2).Element(Block).Text("Telefax +49 (0) 7151 132-105").FontSize(6);
                                table.Cell().Row(7).Column(2).Element(Block).Text("www.ehg-steinberg.de").FontSize(6);
                                table.Cell().Row(8).Column(2).Element(Block).Text("info@ehg-waiblingen.de").FontSize(6);
                                table.Cell().Row(1).Column(3).Element(Block).Text("HRB 4364 AG Chemnitz").FontSize(6);
                                table.Cell().Row(2).Column(3).Element(Block).Text("Geschäftsführerin A.Horlacher").FontSize(6);
                                table.Cell().Row(3).Column(3).Element(Block).Text("Ust.IdNr. DE 141034306").FontSize(6);
                                table.Cell().Row(4).Column(3).Element(Block).Text("Ust.Nr. 22310804219").FontSize(6);
                                table.Cell().Row(1).Column(4).Element(Block).Text("Commerzbank AG").FontSize(6);
                                table.Cell().Row(2).Column(4).Element(Block).Text("IBAN: DE57 8704 0000 0255 4020 00").FontSize(6);
                                table.Cell().Row(10).Column(4).AlignRight().Element(Block).Text(text =>
                                {
                                    text.Span("Seite ").FontSize(6);
                                    text.CurrentPageNumber().FontSize(6);
                                    text.Span(" von ").FontSize(6);
                                    text.TotalPages().FontSize(6);
                                });

                                // for simplicity, you can also use extension method described in the "Extending DSL" section
                                static IContainer Block(IContainer container)
                                {
                                    return container
                                        .AlignLeft();
                                }
                            });

                    });
                })

                .GeneratePdf($"{PPcN.Properties.Settings.Default.DocumentSaveLocation}/Anfrage {Anfragennummer}.pdf");

                using var process = new Process
                {
                    StartInfo = new ProcessStartInfo($"{PPcN.Properties.Settings.Default.DocumentSaveLocation}/Anfrage {Anfragennummer}.pdf")
                    {
                        UseShellExecute = true
                    }
                };

                process.Start();
            }
        }

        public struct PDFInquiryPositionData
        {
            public string Position;
            public string AD;
            public string WS;
            public string Werkstoff;
            public string Lange;
            public string Langetolmin;
            public string Langetolmax;
            public string Menge;
            public string MengeEinheit;
            public string Mengetolmin;
            public string Mengetolmax;
            public string MengetolEinheit;
            public string T1127D;
            public string T1127T;
            public string Liefertermin;
            public string Preis;
            public string PreisEinheit;
            public string Norm;
            public string Ausfuhrung;
            public string WAZ;
            public string Bemerkung;
            public string klMax;
        }

        public struct PDFInquirySurcharge
        {
            public string Beschreibung;
            public string Menge;
            public string Zuschlagsart;
        }

        

        
    }
}